{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/timg.jpg","path":"img/timg.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5ca90cd950fe4493fc39cd6d993a9e509ca17484","modified":1540960296447},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1540363440000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1540363440000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1540363440000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1540363440000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1540363440000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1540363440000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1540363440000},{"_id":"themes/yilia/_config.yml","hash":"9c6d5158fb660af38cb8f1a9d47f5eeba016fbd0","modified":1540534228000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1540363440000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1540363440000},{"_id":"source/_posts/hello-world.md","hash":"54c83d656fb3a7c67ae33ffd2a05e57a59c847e3","modified":1540960296448},{"_id":"source/_posts/graphviz.md","hash":"aa32ca693f1235d63ed16545ad4b7ba391b08272","modified":1543931192775},{"_id":"source/_posts/一维线性对流方程.md","hash":"d7685dbd913bab0582a640005b6ba8b64c676e26","modified":1541233691865},{"_id":"source/_posts/一维非线性对流方程.md","hash":"75bf136a3141fbf92830d65a39e73c5915ce5727","modified":1541233999401},{"_id":"source/_posts/二维博格斯方程.md","hash":"51efdb63a323e9298428d2d8447d299a6e01d3fc","modified":1542690554921},{"_id":"source/_posts/二维对流方程.md","hash":"25fc0551e4ff6144ba21d79266d0ba3842901e2c","modified":1541409631089},{"_id":"source/_posts/新的开始.md","hash":"6134195b48eb71a74512d20bbe0e0447e00687ed","modified":1540960296449},{"_id":"source/_posts/有限差分法求解常微分方程(欧拉法).md","hash":"58e9d698b67de1ed41e9ce212497b5ef021ab019","modified":1541049005689},{"_id":"source/_posts/有限差分法求解常微分方程（中心差分）.md","hash":"afebec2fdfa5281a64199c83f95b61a2771deeaa","modified":1541049027280},{"_id":"source/_posts/龙格库塔法.md","hash":"8230b938fc5ff5e9ecb21ae74d376f5cfe835194","modified":1541050901386},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1540363440000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1540363440000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1540363440000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1540363440000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1540363440000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1540363440000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1540363440000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1540363440000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1540363440000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1540363440000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1540363440000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1540363440000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1540363440000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1540363440000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1540363440000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1540363440000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1540363440000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1540363440000},{"_id":"source/_posts/a.svg","hash":"bf7a2e8ac2ebdee0849c141b619db7cb88560795","modified":1540960296448},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540363440000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1540363440000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1540363440000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1540363440000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1540363440000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1540363440000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1540363440000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1540363440000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1540363440000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1540363440000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1540363440000},{"_id":"themes/yilia/source/img/timg.jpg","hash":"d6e90254e7fd93cc378459cac1bbf8d8793bd01a","modified":1540370712000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1540363440000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1540363440000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1540363440000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1540363440000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1540363440000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1540363440000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1540363440000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1540363440000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1540363440000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1540363440000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1540363440000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1540363440000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1540363440000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1540363440000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1540363440000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1540363440000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1540363440000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1540363440000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1540363440000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1540363440000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1540363440000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1540363440000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1540363440000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1540363440000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1540363440000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1540363440000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1540363440000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1540363440000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1540363440000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1540363440000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1540363440000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1540363440000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1540363440000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1540363440000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1540363440000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1540363440000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1540363440000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1540363440000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1540363440000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1540363440000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1540363440000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1540363440000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1540363440000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1540363440000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1540363440000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1540363440000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1540363440000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1540363440000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1540363440000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1540363440000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1540363440000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1540363440000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1540363440000},{"_id":"public/content.json","hash":"3ae9d18adc1cbc7495a266e511643ddb33fe93d2","modified":1543932492858},{"_id":"public/2018/12/04/graphviz/index.html","hash":"671b2b1a2675bce5d92a9d249a652235358e2a8f","modified":1543932493610},{"_id":"public/2018/11/20/二维博格斯方程/index.html","hash":"a83641ef1f2f64408abd48fd514619ad97d44187","modified":1543932493611},{"_id":"public/2018/11/05/二维对流方程/index.html","hash":"5c6ffe2348bdbd0950f73d8b29b75f3ea0147d60","modified":1543932493634},{"_id":"public/2018/11/03/一维非线性对流方程/index.html","hash":"e73968f54b9be04cc1965d783669be41532c4f2e","modified":1543932493634},{"_id":"public/2018/11/01/龙格库塔法/index.html","hash":"6c30429cb58ff8bab4b79343201f8884fdf604cb","modified":1543932493635},{"_id":"public/2018/10/30/一维线性对流方程/index.html","hash":"b6ef0f51427cc5dd02cb538064753ddc28533625","modified":1543932493635},{"_id":"public/2018/10/26/有限差分法求解常微分方程(欧拉法)/index.html","hash":"9c6446dc4591b935630c508efec6424e6d637995","modified":1543932493635},{"_id":"public/2018/10/26/有限差分法求解常微分方程（中心差分）/index.html","hash":"ba88243f7cf772868b3c468267d81a736b6054f0","modified":1543932493635},{"_id":"public/2018/10/25/新的开始/index.html","hash":"d2fb5ca4ca46e112f183275402ba07291609762f","modified":1543932493635},{"_id":"public/2018/10/24/hello-world/index.html","hash":"e7166d7eefcebf4b784a83c62573d031299936c4","modified":1543932493635},{"_id":"public/archives/index.html","hash":"bed341bbd9ef59a9b24e2a82de2699ddc0f8fdb4","modified":1543932493635},{"_id":"public/archives/2018/index.html","hash":"a9cd57393ce3528f1cc03f7e07899909758a31fd","modified":1543932493636},{"_id":"public/archives/2018/10/index.html","hash":"d7c1052ad4b3518d21197bd07e705a31479de8a2","modified":1543932493636},{"_id":"public/archives/2018/11/index.html","hash":"f04f174f993e08420d9652c9e1b9d7788203f7e1","modified":1543932493636},{"_id":"public/archives/2018/12/index.html","hash":"fa2f3e74d66af85092c0c7bd7821fa3466d262c1","modified":1543932493637},{"_id":"public/categories/实用工具/index.html","hash":"c085ebae6e092506fdcd705022acc9340d740774","modified":1543932493637},{"_id":"public/categories/CFD/index.html","hash":"d3ccad522bf911f097575ac97169109dd130acc9","modified":1543932493637},{"_id":"public/categories/数值计算/index.html","hash":"3c0c65451f52ea211c424c865e5fd59a2b5e2517","modified":1543932493637},{"_id":"public/tags/随笔/index.html","hash":"d2908ab07355ebe33d58de9d6ba80962e5e3075c","modified":1543932493637},{"_id":"public/tags/Python/index.html","hash":"2bf2573338a2691230af4b48fdddce59cf277c9c","modified":1543932493638},{"_id":"public/tags/MatLab/index.html","hash":"05130efc45b3125552bef1d131f1f3e8ee3b3f9a","modified":1543932493638},{"_id":"public/index.html","hash":"ebb6f2c475f6fdccc4163611bfce9bf5650cf832","modified":1543932493665},{"_id":"public/CNAME","hash":"5ca90cd950fe4493fc39cd6d993a9e509ca17484","modified":1543932493665},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1543932493665},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1543932493665},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1543932493665},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1543932493665},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1543932493665},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1543932493665},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1543932493665},{"_id":"public/img/timg.jpg","hash":"d6e90254e7fd93cc378459cac1bbf8d8793bd01a","modified":1543932493665},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1543932493666},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1543932493666},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1543932493671},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1543932493671},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1543932493671},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1543932493671}],"Category":[{"name":"实用工具","_id":"cjp9tjjdx0004b8umc613j5re"},{"name":"CFD","_id":"cjp9tjje0000ab8umktuub0k5"},{"name":"数值计算","_id":"cjp9tjjef000wb8umybiiiq9i"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2018-10-24T08:07:32.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: 随笔\ndate: 2018-10-24 16:07:32\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-10-31T04:31:36.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp9tjjdi0000b8umezxlfb0t","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br>","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"graphviz教程1（无向图）","date":"2018-12-04T13:45:00.000Z","_content":"本次博文的内容主要为：新建两个节点A、B，然后使用一条线段连接节点A、B，所谓的无向图指的就是连接节点A、B的这条线段没有箭头表示方向。如下为代码实现的过程。\n<!--more--> \n### 教程如下\n```\n\nimport graphviz as gv\n\n#创建图对象g1和两个节点A、B，并连接A、B\ng1=gv.Graph(format='svg') #图片格式设置为png\ng1.attr(dpi='500')        #图片dpi设置为500\ng1.node('A')\ng1.node('B')\ng1.edge('A','B')\nprint(g1.source) #输出graphviz格式的命令流\n\n#生成PNG图片\nfilename=g1.render(filename=r'C:\\Users\\just\\Desktop\\无向图')\nprint(filename) \n\n\n```\n### 所得png图形  \n![无向图](http://cfd.red/?/images/2018/12/04/X2NblywgvK/%E6%97%A0%E5%90%91%E5%9B%BE.png)\n### graphviz格式的命令流\n![graphviz](http://cfd.red/?/images/2018/12/04/cetbo7dHHd/%E8%BE%93%E5%87%BA.JPG)","source":"_posts/graphviz.md","raw":"---\ntitle: graphviz教程1（无向图）\ncategories: 实用工具\ntags: Python\ndate: 2018-12-04 21:45:00\n---\n本次博文的内容主要为：新建两个节点A、B，然后使用一条线段连接节点A、B，所谓的无向图指的就是连接节点A、B的这条线段没有箭头表示方向。如下为代码实现的过程。\n<!--more--> \n### 教程如下\n```\n\nimport graphviz as gv\n\n#创建图对象g1和两个节点A、B，并连接A、B\ng1=gv.Graph(format='svg') #图片格式设置为png\ng1.attr(dpi='500')        #图片dpi设置为500\ng1.node('A')\ng1.node('B')\ng1.edge('A','B')\nprint(g1.source) #输出graphviz格式的命令流\n\n#生成PNG图片\nfilename=g1.render(filename=r'C:\\Users\\just\\Desktop\\无向图')\nprint(filename) \n\n\n```\n### 所得png图形  \n![无向图](http://cfd.red/?/images/2018/12/04/X2NblywgvK/%E6%97%A0%E5%90%91%E5%9B%BE.png)\n### graphviz格式的命令流\n![graphviz](http://cfd.red/?/images/2018/12/04/cetbo7dHHd/%E8%BE%93%E5%87%BA.JPG)","slug":"graphviz","published":1,"updated":"2018-12-04T13:46:32.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp9tjjdm0001b8umlqwyyn84","content":"<p>本次博文的内容主要为：新建两个节点A、B，然后使用一条线段连接节点A、B，所谓的无向图指的就是连接节点A、B的这条线段没有箭头表示方向。如下为代码实现的过程。<br><a id=\"more\"></a> </p>\n<h3 id=\"教程如下\"><a href=\"#教程如下\" class=\"headerlink\" title=\"教程如下\"></a>教程如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import graphviz as gv</span><br><span class=\"line\"></span><br><span class=\"line\">#创建图对象g1和两个节点A、B，并连接A、B</span><br><span class=\"line\">g1=gv.Graph(format=&apos;svg&apos;) #图片格式设置为png</span><br><span class=\"line\">g1.attr(dpi=&apos;500&apos;)        #图片dpi设置为500</span><br><span class=\"line\">g1.node(&apos;A&apos;)</span><br><span class=\"line\">g1.node(&apos;B&apos;)</span><br><span class=\"line\">g1.edge(&apos;A&apos;,&apos;B&apos;)</span><br><span class=\"line\">print(g1.source) #输出graphviz格式的命令流</span><br><span class=\"line\"></span><br><span class=\"line\">#生成PNG图片</span><br><span class=\"line\">filename=g1.render(filename=r&apos;C:\\Users\\just\\Desktop\\无向图&apos;)</span><br><span class=\"line\">print(filename)</span><br></pre></td></tr></table></figure>\n<h3 id=\"所得png图形\"><a href=\"#所得png图形\" class=\"headerlink\" title=\"所得png图形\"></a>所得png图形</h3><p><img src=\"http://cfd.red/?/images/2018/12/04/X2NblywgvK/%E6%97%A0%E5%90%91%E5%9B%BE.png\" alt=\"无向图\"></p>\n<h3 id=\"graphviz格式的命令流\"><a href=\"#graphviz格式的命令流\" class=\"headerlink\" title=\"graphviz格式的命令流\"></a>graphviz格式的命令流</h3><p><img src=\"http://cfd.red/?/images/2018/12/04/cetbo7dHHd/%E8%BE%93%E5%87%BA.JPG\" alt=\"graphviz\"></p>\n","site":{"data":{}},"excerpt":"<p>本次博文的内容主要为：新建两个节点A、B，然后使用一条线段连接节点A、B，所谓的无向图指的就是连接节点A、B的这条线段没有箭头表示方向。如下为代码实现的过程。<br>","more":"</p>\n<h3 id=\"教程如下\"><a href=\"#教程如下\" class=\"headerlink\" title=\"教程如下\"></a>教程如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import graphviz as gv</span><br><span class=\"line\"></span><br><span class=\"line\">#创建图对象g1和两个节点A、B，并连接A、B</span><br><span class=\"line\">g1=gv.Graph(format=&apos;svg&apos;) #图片格式设置为png</span><br><span class=\"line\">g1.attr(dpi=&apos;500&apos;)        #图片dpi设置为500</span><br><span class=\"line\">g1.node(&apos;A&apos;)</span><br><span class=\"line\">g1.node(&apos;B&apos;)</span><br><span class=\"line\">g1.edge(&apos;A&apos;,&apos;B&apos;)</span><br><span class=\"line\">print(g1.source) #输出graphviz格式的命令流</span><br><span class=\"line\"></span><br><span class=\"line\">#生成PNG图片</span><br><span class=\"line\">filename=g1.render(filename=r&apos;C:\\Users\\just\\Desktop\\无向图&apos;)</span><br><span class=\"line\">print(filename)</span><br></pre></td></tr></table></figure>\n<h3 id=\"所得png图形\"><a href=\"#所得png图形\" class=\"headerlink\" title=\"所得png图形\"></a>所得png图形</h3><p><img src=\"http://cfd.red/?/images/2018/12/04/X2NblywgvK/%E6%97%A0%E5%90%91%E5%9B%BE.png\" alt=\"无向图\"></p>\n<h3 id=\"graphviz格式的命令流\"><a href=\"#graphviz格式的命令流\" class=\"headerlink\" title=\"graphviz格式的命令流\"></a>graphviz格式的命令流</h3><p><img src=\"http://cfd.red/?/images/2018/12/04/cetbo7dHHd/%E8%BE%93%E5%87%BA.JPG\" alt=\"graphviz\"></p>"},{"title":"一维线性对流方程","date":"2018-10-30T06:00:00.000Z","_content":"一维线性对流方程是cfd中最简单、最基础的控制方程，通过对一维线性对流方程的离散与计算可以学到cfd计算的基本过程\n\n$$\\frac{\\partial u}{\\partial t}+c\\frac{\\partial u}{\\partial x}=0$$\n\n对流方程可以看做是波的传播方程，其中c代表波速\n<!--more-->\n## 数值离散\n对时间项向前差分，空间项使用向后差分。  \n下式为对空间项向后差分  \n$$\\frac{\\partial u}{\\partial t} \\approx \\frac{u(x+\\Delta x)-u(x)}{\\Delta x}$$ \n总的离散方程  \n$$\\frac{u^{n+1}_i-u^n_i}{\\Delta t}+c\\frac{u^n_i-u^n_{i-1}}{\\Delta x}=0$$\n变换形式的离散方程  \n$$u^{n+1}_i=u^n_i-c\\frac{\\Delta t}{\\Delta x}(u^n_i-u^n_{i-1})$$\n\n### 初始条件\n定义域为（0,2），在[0.5,1]范围内，U=2,其他区间内，U均为1\n\n## 编程求解\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time,sys\n\nnx=41  #空间节点数\ndx=2/(nx-1) #空间步长\n\nnt=25 #时间步数\ndt=0.025 #时间步长\nc=1  #传播速度\n\nu=np.ones(nx) #所有节点初始化为1\nu[int(0.5/dx):int(1/dx+1)]=2 #将[0.5,1]之间的值初始化为2\nprint(u)\nun=np.ones(nx) #初始化时间节点\nfor n in range(nt): #s时间步长，从0到25\nun=u.copy() #将已存在的u值赋予un\nfor i in range(1,nx):\nu[i]=un[i]-c*dt/dx*(un[i]-un[i-1])\nplt.plot(np.linspace(0,2,nx),u)\nplt.show()\n\n``` \n\n### 初始波形  \n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/rini.jpeg)\n### 最终波形\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/resultduibi.jpeg)\n### 波形对比\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/result.jpeg)\n### 初始化输出的值\n\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/%E8%BF%90%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96.JPG)  \n本文参考自[CFDPython](http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/01_Step_1.ipynb)","source":"_posts/一维线性对流方程.md","raw":"---\ntitle: 一维线性对流方程\ncategories: CFD\ntags: Python\ndate: 2018-10-30 14:00:00\n---\n一维线性对流方程是cfd中最简单、最基础的控制方程，通过对一维线性对流方程的离散与计算可以学到cfd计算的基本过程\n\n$$\\frac{\\partial u}{\\partial t}+c\\frac{\\partial u}{\\partial x}=0$$\n\n对流方程可以看做是波的传播方程，其中c代表波速\n<!--more-->\n## 数值离散\n对时间项向前差分，空间项使用向后差分。  \n下式为对空间项向后差分  \n$$\\frac{\\partial u}{\\partial t} \\approx \\frac{u(x+\\Delta x)-u(x)}{\\Delta x}$$ \n总的离散方程  \n$$\\frac{u^{n+1}_i-u^n_i}{\\Delta t}+c\\frac{u^n_i-u^n_{i-1}}{\\Delta x}=0$$\n变换形式的离散方程  \n$$u^{n+1}_i=u^n_i-c\\frac{\\Delta t}{\\Delta x}(u^n_i-u^n_{i-1})$$\n\n### 初始条件\n定义域为（0,2），在[0.5,1]范围内，U=2,其他区间内，U均为1\n\n## 编程求解\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time,sys\n\nnx=41  #空间节点数\ndx=2/(nx-1) #空间步长\n\nnt=25 #时间步数\ndt=0.025 #时间步长\nc=1  #传播速度\n\nu=np.ones(nx) #所有节点初始化为1\nu[int(0.5/dx):int(1/dx+1)]=2 #将[0.5,1]之间的值初始化为2\nprint(u)\nun=np.ones(nx) #初始化时间节点\nfor n in range(nt): #s时间步长，从0到25\nun=u.copy() #将已存在的u值赋予un\nfor i in range(1,nx):\nu[i]=un[i]-c*dt/dx*(un[i]-un[i-1])\nplt.plot(np.linspace(0,2,nx),u)\nplt.show()\n\n``` \n\n### 初始波形  \n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/rini.jpeg)\n### 最终波形\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/resultduibi.jpeg)\n### 波形对比\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/result.jpeg)\n### 初始化输出的值\n\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/%E8%BF%90%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96.JPG)  \n本文参考自[CFDPython](http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/01_Step_1.ipynb)","slug":"一维线性对流方程","published":1,"updated":"2018-11-03T08:28:11.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp9tjjdv0003b8um8j19isp9","content":"<p>一维线性对流方程是cfd中最简单、最基础的控制方程，通过对一维线性对流方程的离散与计算可以学到cfd计算的基本过程</p>\n<p>$$\\frac{\\partial u}{\\partial t}+c\\frac{\\partial u}{\\partial x}=0$$</p>\n<p>对流方程可以看做是波的传播方程，其中c代表波速<br><a id=\"more\"></a></p>\n<h2 id=\"数值离散\"><a href=\"#数值离散\" class=\"headerlink\" title=\"数值离散\"></a>数值离散</h2><p>对时间项向前差分，空间项使用向后差分。<br>下式为对空间项向后差分<br>$$\\frac{\\partial u}{\\partial t} \\approx \\frac{u(x+\\Delta x)-u(x)}{\\Delta x}$$<br>总的离散方程<br>$$\\frac{u^{n+1}_i-u^n_i}{\\Delta t}+c\\frac{u^n_i-u^n_{i-1}}{\\Delta x}=0$$<br>变换形式的离散方程<br>$$u^{n+1}_i=u^n_i-c\\frac{\\Delta t}{\\Delta x}(u^n_i-u^n_{i-1})$$</p>\n<h3 id=\"初始条件\"><a href=\"#初始条件\" class=\"headerlink\" title=\"初始条件\"></a>初始条件</h3><p>定义域为（0,2），在[0.5,1]范围内，U=2,其他区间内，U均为1</p>\n<h2 id=\"编程求解\"><a href=\"#编程求解\" class=\"headerlink\" title=\"编程求解\"></a>编程求解</h2><pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport time,sys\n\nnx=41  #空间节点数\ndx=2/(nx-1) #空间步长\n\nnt=25 #时间步数\ndt=0.025 #时间步长\nc=1  #传播速度\n\nu=np.ones(nx) #所有节点初始化为1\nu[int(0.5/dx):int(1/dx+1)]=2 #将[0.5,1]之间的值初始化为2\nprint(u)\nun=np.ones(nx) #初始化时间节点\nfor n in range(nt): #s时间步长，从0到25\nun=u.copy() #将已存在的u值赋予un\nfor i in range(1,nx):\nu[i]=un[i]-c*dt/dx*(un[i]-un[i-1])\nplt.plot(np.linspace(0,2,nx),u)\nplt.show()\n\n</code></pre><h3 id=\"初始波形\"><a href=\"#初始波形\" class=\"headerlink\" title=\"初始波形\"></a>初始波形</h3><p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/rini.jpeg\" alt=\"图片\"></p>\n<h3 id=\"最终波形\"><a href=\"#最终波形\" class=\"headerlink\" title=\"最终波形\"></a>最终波形</h3><p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/resultduibi.jpeg\" alt=\"图片\"></p>\n<h3 id=\"波形对比\"><a href=\"#波形对比\" class=\"headerlink\" title=\"波形对比\"></a>波形对比</h3><p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/result.jpeg\" alt=\"图片\"></p>\n<h3 id=\"初始化输出的值\"><a href=\"#初始化输出的值\" class=\"headerlink\" title=\"初始化输出的值\"></a>初始化输出的值</h3><p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/%E8%BF%90%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96.JPG\" alt=\"图片\"><br>本文参考自<a href=\"http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/01_Step_1.ipynb\" target=\"_blank\" rel=\"noopener\">CFDPython</a></p>\n","site":{"data":{}},"excerpt":"<p>一维线性对流方程是cfd中最简单、最基础的控制方程，通过对一维线性对流方程的离散与计算可以学到cfd计算的基本过程</p>\n<p>$$\\frac{\\partial u}{\\partial t}+c\\frac{\\partial u}{\\partial x}=0$$</p>\n<p>对流方程可以看做是波的传播方程，其中c代表波速<br>","more":"</p>\n<h2 id=\"数值离散\"><a href=\"#数值离散\" class=\"headerlink\" title=\"数值离散\"></a>数值离散</h2><p>对时间项向前差分，空间项使用向后差分。<br>下式为对空间项向后差分<br>$$\\frac{\\partial u}{\\partial t} \\approx \\frac{u(x+\\Delta x)-u(x)}{\\Delta x}$$<br>总的离散方程<br>$$\\frac{u^{n+1}_i-u^n_i}{\\Delta t}+c\\frac{u^n_i-u^n_{i-1}}{\\Delta x}=0$$<br>变换形式的离散方程<br>$$u^{n+1}_i=u^n_i-c\\frac{\\Delta t}{\\Delta x}(u^n_i-u^n_{i-1})$$</p>\n<h3 id=\"初始条件\"><a href=\"#初始条件\" class=\"headerlink\" title=\"初始条件\"></a>初始条件</h3><p>定义域为（0,2），在[0.5,1]范围内，U=2,其他区间内，U均为1</p>\n<h2 id=\"编程求解\"><a href=\"#编程求解\" class=\"headerlink\" title=\"编程求解\"></a>编程求解</h2><pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport time,sys\n\nnx=41  #空间节点数\ndx=2/(nx-1) #空间步长\n\nnt=25 #时间步数\ndt=0.025 #时间步长\nc=1  #传播速度\n\nu=np.ones(nx) #所有节点初始化为1\nu[int(0.5/dx):int(1/dx+1)]=2 #将[0.5,1]之间的值初始化为2\nprint(u)\nun=np.ones(nx) #初始化时间节点\nfor n in range(nt): #s时间步长，从0到25\nun=u.copy() #将已存在的u值赋予un\nfor i in range(1,nx):\nu[i]=un[i]-c*dt/dx*(un[i]-un[i-1])\nplt.plot(np.linspace(0,2,nx),u)\nplt.show()\n\n</code></pre><h3 id=\"初始波形\"><a href=\"#初始波形\" class=\"headerlink\" title=\"初始波形\"></a>初始波形</h3><p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/rini.jpeg\" alt=\"图片\"></p>\n<h3 id=\"最终波形\"><a href=\"#最终波形\" class=\"headerlink\" title=\"最终波形\"></a>最终波形</h3><p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/resultduibi.jpeg\" alt=\"图片\"></p>\n<h3 id=\"波形对比\"><a href=\"#波形对比\" class=\"headerlink\" title=\"波形对比\"></a>波形对比</h3><p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/result.jpeg\" alt=\"图片\"></p>\n<h3 id=\"初始化输出的值\"><a href=\"#初始化输出的值\" class=\"headerlink\" title=\"初始化输出的值\"></a>初始化输出的值</h3><p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/%E8%BF%90%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96.JPG\" alt=\"图片\"><br>本文参考自<a href=\"http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/01_Step_1.ipynb\" target=\"_blank\" rel=\"noopener\">CFDPython</a></p>"},{"title":"二维博格斯方程","date":"2018-11-20T04:50:00.000Z","_content":"### 博格斯方程的特点\n在初始条件为光滑时，仍会产生不连续的解，即会产生震荡  \n如下为其PDE方程  \n$$\\frac{\\partial u}{\\partial t}+u\\frac{\\partial u}{\\partial x}+v\\frac{\\partial u}{\\partial y}=\\nu \\left( \\frac{\\partial ^2u}{\\partial x^2}+\\frac{\\partial ^2u}{\\partial y^2} \\right) $$  \n$$\\frac{\\partial v}{\\partial t}+u\\frac{\\partial v}{\\partial x}+v\\frac{\\partial v}{\\partial y}=\\nu \\left( \\frac{\\partial ^2v}{\\partial x^2}+\\frac{\\partial ^2v}{\\partial y^2} \\right) $$\n<!--more-->\n### 其离散方程如下  \n$$\\frac{u_{i,j}^{n+1}-u_{i,j}^{n}}{\\varDelta t}+u_{i,j}^{n}\\frac{u_{i,j}^{n}-u_{i-\\text{1,}j}^{n}}{\\varDelta x}+v_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i,j-1}^{n}}{\\varDelta y}=\\nu \\left( \\frac{u_{i+\\text{1,}j}^{n}-2u_{i,j}^{n}+u_{i-\\text{1,}j}^{n}}{\\varDelta x^2}+\\frac{u_{i,j+1}^{n}-2u_{i,j}^{n}+u_{i,j-1}^{n}}{\\varDelta y^2} \\right) $$\n$$\\frac{v_{i,j}^{n+1}-v_{i,j}^{n}}{\\varDelta t}+u_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i-\\text{1,}j}^{n}}{\\varDelta x}+v_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i,j-1}^{n}}{\\varDelta y}=\\nu \\left( \\frac{v_{i+\\text{1,}j}^{n}-2v_{i,j}^{n}+v_{i-\\text{1,}j}^{n}}{\\varDelta x^2}+\\frac{v_{i,j+1}^{n}-2v_{i,j}^{n}+v_{i,j-1}^{n}}{\\varDelta y^2} \\right) $$\n### 将离散方程整理可得\n$$u_{i,j}^{n+1}=u_{i,j}^{n}-\\frac{\\varDelta t}{\\varDelta x}u_{i,j}^{n}\\left( u_{i,j}^{n}-u_{i-\\text{1,}j}^{n} \\right) -\\frac{\\varDelta t}{\\varDelta y}v_{i,j}^{n}\\left( u_{i,j}^{n}-u_{i,j-1}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta x^2}\\left( u_{i+\\text{1,}j}^{n}+2u_{i,j}^{n}+u_{i-\\text{1,}j}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta y^2}\\left( u_{i,j+1}^{n}+2u_{i,j}^{n}+u_{i,j-1}^{n} \\right) $$\n$$v_{i,j}^{n+1}=v_{i,j}^{n}-\\frac{\\varDelta t}{\\varDelta x}u_{i,j}^{n}\\left( v_{i,j}^{n}-v_{i-\\text{1,}j}^{n} \\right) -\\frac{\\varDelta t}{\\varDelta y}v_{i,j}^{n}\\left( v_{i,j}^{n}-v_{i,j-1}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta x^2}\\left( v_{i+\\text{1,}j}^{n}+2v_{i,j}^{n}+v_{i-\\text{1,}j}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta y^2}\\left( v_{i,j+1}^{n}+2v_{i,j}^{n}+v_{i,j-1}^{n} \\right) $$\n## 编程求解\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom mpl_toolkits.mplot3d import Axes3D\nimport time\nnx=41\nny=41\nnt=120\nc=1\ndx=2/(nx-1)\ndy=2/(ny-1)\nsigma=.0009\nnu=0.01\ndt=sigma*dx*dy/nu\n\nx=np.linspace(0,2,nx)\ny=np.linspace(0,2,ny)\n\nu=np.ones((ny,nx))\nv=np.ones((ny,nx))\nun=np.ones((ny,nx))\nvn=np.ones((ny,nx))\ncomb=np.ones((ny,nx))\n\n#初始化边界条件u(.5<=x<=1&&.5<=y<=1)\nu[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2\nv[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2\n```\n### 画出初始条件图形\n```\nfig=plt.figure(figsize=(11,7),dpi=100)\nax=fig.gca(projection='3d')\nX,Y=np.meshgrid(x,y)\nax.plot_surface(X,Y,u[:],cmap=cm.viridis,rstride=1,cstride=1)\nax.plot_surface(X,Y,v[:],cmap=cm.viridis,rstride=1,cstride=1)\nax.set_xlabel=('$x$')\nax.set_ylabel=('$y$')\n```\n![初始条件](http://cfd.red/?/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%E5%88%9D%E5%A7%8B%E6%9D%A1%E4%BB%B6.svg)\n### 迭代求解\n```\nfor n in range(nt+1):\n    un=u.copy()\n    vn=v.copy()\n    \n    u[1:-1,1:-1]=(un[1:-1,1:-1]-dt/dx*un[1:-1,1:-1]*(un[1:-1,1:-1]-un[1:-1,0:-2])-dt/dy*vn[1:-1,1:-1]*(un[1:-1,1:-1]-un[0:-2,1:-1])+nu*dt/dx**2*(un[1:-1,2:]-2*un[1:-1,1:-1]+un[1:-1,0:-2])+nu*dt/dy**2*(un[2:,1:-1]-2*un[1:-1,1:-1]+un[0:-2,1:-1]))\n    v[1:-1,1:-1]=(vn[1:-1,1:-1]-dt/dx*un[1:-1,1:-1]*(un[1:-1,1:-1]-un[1:-1,0:-2])-dt/dy*vn[1:-1,1:-1]*(un[1:-1,1:-1]-un[0:-2,1:-1])+nu*dt/dx**2*(vn[1:-1,2:]-2*vn[1:-1,1:-1]+vn[1:-1,0:-2])+nu*dt/dy**2*(vn[2:,1:-1]-2*vn[1:-1,1:-1]+vn[0:-2,1:-1]))\n    u[0,:]=1\n    u[-1,:]=1\n    u[:,0]=1\n    u[:,-1]=1\n    \n    v[0,:]=1\n    v[-1,:]=1\n    v[:,0]=1\n    v[:,-1]=1\n\n```\n### 画出最终图形\n```\nfig=plt.figure(figsize=(11,7),dpi=100)\nax=fig.gca(projection='3d')\nX,Y=np.meshgrid(x,y)\nax.plot_surface(X,Y,u,cmap=cm.viridis,rstride=1,cstride=1)\nax.plot_surface(X,Y,v,cmap=cm.viridis,rstride=1,cstride=1)\nax.set_xlabel=('$x$')\nax.set_ylabel=('$y$');\n```\n![最终图形](http://cfd.red/?/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%E6%9C%80%E7%BB%88%E5%9B%BE%E5%BD%A2.svg)\n#### 此次迭代运行时间为 0.01237304888854851秒","source":"_posts/二维博格斯方程.md","raw":"---\ntitle: 二维博格斯方程\ncategories: CFD\ntags: Python\ndate: 2018-11-20 12:50:00\n---\n### 博格斯方程的特点\n在初始条件为光滑时，仍会产生不连续的解，即会产生震荡  \n如下为其PDE方程  \n$$\\frac{\\partial u}{\\partial t}+u\\frac{\\partial u}{\\partial x}+v\\frac{\\partial u}{\\partial y}=\\nu \\left( \\frac{\\partial ^2u}{\\partial x^2}+\\frac{\\partial ^2u}{\\partial y^2} \\right) $$  \n$$\\frac{\\partial v}{\\partial t}+u\\frac{\\partial v}{\\partial x}+v\\frac{\\partial v}{\\partial y}=\\nu \\left( \\frac{\\partial ^2v}{\\partial x^2}+\\frac{\\partial ^2v}{\\partial y^2} \\right) $$\n<!--more-->\n### 其离散方程如下  \n$$\\frac{u_{i,j}^{n+1}-u_{i,j}^{n}}{\\varDelta t}+u_{i,j}^{n}\\frac{u_{i,j}^{n}-u_{i-\\text{1,}j}^{n}}{\\varDelta x}+v_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i,j-1}^{n}}{\\varDelta y}=\\nu \\left( \\frac{u_{i+\\text{1,}j}^{n}-2u_{i,j}^{n}+u_{i-\\text{1,}j}^{n}}{\\varDelta x^2}+\\frac{u_{i,j+1}^{n}-2u_{i,j}^{n}+u_{i,j-1}^{n}}{\\varDelta y^2} \\right) $$\n$$\\frac{v_{i,j}^{n+1}-v_{i,j}^{n}}{\\varDelta t}+u_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i-\\text{1,}j}^{n}}{\\varDelta x}+v_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i,j-1}^{n}}{\\varDelta y}=\\nu \\left( \\frac{v_{i+\\text{1,}j}^{n}-2v_{i,j}^{n}+v_{i-\\text{1,}j}^{n}}{\\varDelta x^2}+\\frac{v_{i,j+1}^{n}-2v_{i,j}^{n}+v_{i,j-1}^{n}}{\\varDelta y^2} \\right) $$\n### 将离散方程整理可得\n$$u_{i,j}^{n+1}=u_{i,j}^{n}-\\frac{\\varDelta t}{\\varDelta x}u_{i,j}^{n}\\left( u_{i,j}^{n}-u_{i-\\text{1,}j}^{n} \\right) -\\frac{\\varDelta t}{\\varDelta y}v_{i,j}^{n}\\left( u_{i,j}^{n}-u_{i,j-1}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta x^2}\\left( u_{i+\\text{1,}j}^{n}+2u_{i,j}^{n}+u_{i-\\text{1,}j}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta y^2}\\left( u_{i,j+1}^{n}+2u_{i,j}^{n}+u_{i,j-1}^{n} \\right) $$\n$$v_{i,j}^{n+1}=v_{i,j}^{n}-\\frac{\\varDelta t}{\\varDelta x}u_{i,j}^{n}\\left( v_{i,j}^{n}-v_{i-\\text{1,}j}^{n} \\right) -\\frac{\\varDelta t}{\\varDelta y}v_{i,j}^{n}\\left( v_{i,j}^{n}-v_{i,j-1}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta x^2}\\left( v_{i+\\text{1,}j}^{n}+2v_{i,j}^{n}+v_{i-\\text{1,}j}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta y^2}\\left( v_{i,j+1}^{n}+2v_{i,j}^{n}+v_{i,j-1}^{n} \\right) $$\n## 编程求解\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom mpl_toolkits.mplot3d import Axes3D\nimport time\nnx=41\nny=41\nnt=120\nc=1\ndx=2/(nx-1)\ndy=2/(ny-1)\nsigma=.0009\nnu=0.01\ndt=sigma*dx*dy/nu\n\nx=np.linspace(0,2,nx)\ny=np.linspace(0,2,ny)\n\nu=np.ones((ny,nx))\nv=np.ones((ny,nx))\nun=np.ones((ny,nx))\nvn=np.ones((ny,nx))\ncomb=np.ones((ny,nx))\n\n#初始化边界条件u(.5<=x<=1&&.5<=y<=1)\nu[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2\nv[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2\n```\n### 画出初始条件图形\n```\nfig=plt.figure(figsize=(11,7),dpi=100)\nax=fig.gca(projection='3d')\nX,Y=np.meshgrid(x,y)\nax.plot_surface(X,Y,u[:],cmap=cm.viridis,rstride=1,cstride=1)\nax.plot_surface(X,Y,v[:],cmap=cm.viridis,rstride=1,cstride=1)\nax.set_xlabel=('$x$')\nax.set_ylabel=('$y$')\n```\n![初始条件](http://cfd.red/?/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%E5%88%9D%E5%A7%8B%E6%9D%A1%E4%BB%B6.svg)\n### 迭代求解\n```\nfor n in range(nt+1):\n    un=u.copy()\n    vn=v.copy()\n    \n    u[1:-1,1:-1]=(un[1:-1,1:-1]-dt/dx*un[1:-1,1:-1]*(un[1:-1,1:-1]-un[1:-1,0:-2])-dt/dy*vn[1:-1,1:-1]*(un[1:-1,1:-1]-un[0:-2,1:-1])+nu*dt/dx**2*(un[1:-1,2:]-2*un[1:-1,1:-1]+un[1:-1,0:-2])+nu*dt/dy**2*(un[2:,1:-1]-2*un[1:-1,1:-1]+un[0:-2,1:-1]))\n    v[1:-1,1:-1]=(vn[1:-1,1:-1]-dt/dx*un[1:-1,1:-1]*(un[1:-1,1:-1]-un[1:-1,0:-2])-dt/dy*vn[1:-1,1:-1]*(un[1:-1,1:-1]-un[0:-2,1:-1])+nu*dt/dx**2*(vn[1:-1,2:]-2*vn[1:-1,1:-1]+vn[1:-1,0:-2])+nu*dt/dy**2*(vn[2:,1:-1]-2*vn[1:-1,1:-1]+vn[0:-2,1:-1]))\n    u[0,:]=1\n    u[-1,:]=1\n    u[:,0]=1\n    u[:,-1]=1\n    \n    v[0,:]=1\n    v[-1,:]=1\n    v[:,0]=1\n    v[:,-1]=1\n\n```\n### 画出最终图形\n```\nfig=plt.figure(figsize=(11,7),dpi=100)\nax=fig.gca(projection='3d')\nX,Y=np.meshgrid(x,y)\nax.plot_surface(X,Y,u,cmap=cm.viridis,rstride=1,cstride=1)\nax.plot_surface(X,Y,v,cmap=cm.viridis,rstride=1,cstride=1)\nax.set_xlabel=('$x$')\nax.set_ylabel=('$y$');\n```\n![最终图形](http://cfd.red/?/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%E6%9C%80%E7%BB%88%E5%9B%BE%E5%BD%A2.svg)\n#### 此次迭代运行时间为 0.01237304888854851秒","slug":"二维博格斯方程","published":1,"updated":"2018-11-20T05:09:14.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp9tjjdx0005b8umsfg3elp3","content":"<h3 id=\"博格斯方程的特点\"><a href=\"#博格斯方程的特点\" class=\"headerlink\" title=\"博格斯方程的特点\"></a>博格斯方程的特点</h3><p>在初始条件为光滑时，仍会产生不连续的解，即会产生震荡<br>如下为其PDE方程<br>$$\\frac{\\partial u}{\\partial t}+u\\frac{\\partial u}{\\partial x}+v\\frac{\\partial u}{\\partial y}=\\nu \\left( \\frac{\\partial ^2u}{\\partial x^2}+\\frac{\\partial ^2u}{\\partial y^2} \\right) $$<br>$$\\frac{\\partial v}{\\partial t}+u\\frac{\\partial v}{\\partial x}+v\\frac{\\partial v}{\\partial y}=\\nu \\left( \\frac{\\partial ^2v}{\\partial x^2}+\\frac{\\partial ^2v}{\\partial y^2} \\right) $$<br><a id=\"more\"></a></p>\n<h3 id=\"其离散方程如下\"><a href=\"#其离散方程如下\" class=\"headerlink\" title=\"其离散方程如下\"></a>其离散方程如下</h3><p>$$\\frac{u_{i,j}^{n+1}-u_{i,j}^{n}}{\\varDelta t}+u_{i,j}^{n}\\frac{u_{i,j}^{n}-u_{i-\\text{1,}j}^{n}}{\\varDelta x}+v_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i,j-1}^{n}}{\\varDelta y}=\\nu \\left( \\frac{u_{i+\\text{1,}j}^{n}-2u_{i,j}^{n}+u_{i-\\text{1,}j}^{n}}{\\varDelta x^2}+\\frac{u_{i,j+1}^{n}-2u_{i,j}^{n}+u_{i,j-1}^{n}}{\\varDelta y^2} \\right) $$<br>$$\\frac{v_{i,j}^{n+1}-v_{i,j}^{n}}{\\varDelta t}+u_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i-\\text{1,}j}^{n}}{\\varDelta x}+v_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i,j-1}^{n}}{\\varDelta y}=\\nu \\left( \\frac{v_{i+\\text{1,}j}^{n}-2v_{i,j}^{n}+v_{i-\\text{1,}j}^{n}}{\\varDelta x^2}+\\frac{v_{i,j+1}^{n}-2v_{i,j}^{n}+v_{i,j-1}^{n}}{\\varDelta y^2} \\right) $$</p>\n<h3 id=\"将离散方程整理可得\"><a href=\"#将离散方程整理可得\" class=\"headerlink\" title=\"将离散方程整理可得\"></a>将离散方程整理可得</h3><p>$$u_{i,j}^{n+1}=u_{i,j}^{n}-\\frac{\\varDelta t}{\\varDelta x}u_{i,j}^{n}\\left( u_{i,j}^{n}-u_{i-\\text{1,}j}^{n} \\right) -\\frac{\\varDelta t}{\\varDelta y}v_{i,j}^{n}\\left( u_{i,j}^{n}-u_{i,j-1}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta x^2}\\left( u_{i+\\text{1,}j}^{n}+2u_{i,j}^{n}+u_{i-\\text{1,}j}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta y^2}\\left( u_{i,j+1}^{n}+2u_{i,j}^{n}+u_{i,j-1}^{n} \\right) $$<br>$$v_{i,j}^{n+1}=v_{i,j}^{n}-\\frac{\\varDelta t}{\\varDelta x}u_{i,j}^{n}\\left( v_{i,j}^{n}-v_{i-\\text{1,}j}^{n} \\right) -\\frac{\\varDelta t}{\\varDelta y}v_{i,j}^{n}\\left( v_{i,j}^{n}-v_{i,j-1}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta x^2}\\left( v_{i+\\text{1,}j}^{n}+2v_{i,j}^{n}+v_{i-\\text{1,}j}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta y^2}\\left( v_{i,j+1}^{n}+2v_{i,j}^{n}+v_{i,j-1}^{n} \\right) $$</p>\n<h2 id=\"编程求解\"><a href=\"#编程求解\" class=\"headerlink\" title=\"编程求解\"></a>编程求解</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">import matplotlib.cm as cm</span><br><span class=\"line\">from mpl_toolkits.mplot3d import Axes3D</span><br><span class=\"line\">import time</span><br><span class=\"line\">nx=41</span><br><span class=\"line\">ny=41</span><br><span class=\"line\">nt=120</span><br><span class=\"line\">c=1</span><br><span class=\"line\">dx=2/(nx-1)</span><br><span class=\"line\">dy=2/(ny-1)</span><br><span class=\"line\">sigma=.0009</span><br><span class=\"line\">nu=0.01</span><br><span class=\"line\">dt=sigma*dx*dy/nu</span><br><span class=\"line\"></span><br><span class=\"line\">x=np.linspace(0,2,nx)</span><br><span class=\"line\">y=np.linspace(0,2,ny)</span><br><span class=\"line\"></span><br><span class=\"line\">u=np.ones((ny,nx))</span><br><span class=\"line\">v=np.ones((ny,nx))</span><br><span class=\"line\">un=np.ones((ny,nx))</span><br><span class=\"line\">vn=np.ones((ny,nx))</span><br><span class=\"line\">comb=np.ones((ny,nx))</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化边界条件u(.5&lt;=x&lt;=1&amp;&amp;.5&lt;=y&lt;=1)</span><br><span class=\"line\">u[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2</span><br><span class=\"line\">v[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2</span><br></pre></td></tr></table></figure>\n<h3 id=\"画出初始条件图形\"><a href=\"#画出初始条件图形\" class=\"headerlink\" title=\"画出初始条件图形\"></a>画出初始条件图形</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig=plt.figure(figsize=(11,7),dpi=100)</span><br><span class=\"line\">ax=fig.gca(projection=&apos;3d&apos;)</span><br><span class=\"line\">X,Y=np.meshgrid(x,y)</span><br><span class=\"line\">ax.plot_surface(X,Y,u[:],cmap=cm.viridis,rstride=1,cstride=1)</span><br><span class=\"line\">ax.plot_surface(X,Y,v[:],cmap=cm.viridis,rstride=1,cstride=1)</span><br><span class=\"line\">ax.set_xlabel=(&apos;$x$&apos;)</span><br><span class=\"line\">ax.set_ylabel=(&apos;$y$&apos;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://cfd.red/?/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%E5%88%9D%E5%A7%8B%E6%9D%A1%E4%BB%B6.svg\" alt=\"初始条件\"></p>\n<h3 id=\"迭代求解\"><a href=\"#迭代求解\" class=\"headerlink\" title=\"迭代求解\"></a>迭代求解</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for n in range(nt+1):</span><br><span class=\"line\">    un=u.copy()</span><br><span class=\"line\">    vn=v.copy()</span><br><span class=\"line\">    </span><br><span class=\"line\">    u[1:-1,1:-1]=(un[1:-1,1:-1]-dt/dx*un[1:-1,1:-1]*(un[1:-1,1:-1]-un[1:-1,0:-2])-dt/dy*vn[1:-1,1:-1]*(un[1:-1,1:-1]-un[0:-2,1:-1])+nu*dt/dx**2*(un[1:-1,2:]-2*un[1:-1,1:-1]+un[1:-1,0:-2])+nu*dt/dy**2*(un[2:,1:-1]-2*un[1:-1,1:-1]+un[0:-2,1:-1]))</span><br><span class=\"line\">    v[1:-1,1:-1]=(vn[1:-1,1:-1]-dt/dx*un[1:-1,1:-1]*(un[1:-1,1:-1]-un[1:-1,0:-2])-dt/dy*vn[1:-1,1:-1]*(un[1:-1,1:-1]-un[0:-2,1:-1])+nu*dt/dx**2*(vn[1:-1,2:]-2*vn[1:-1,1:-1]+vn[1:-1,0:-2])+nu*dt/dy**2*(vn[2:,1:-1]-2*vn[1:-1,1:-1]+vn[0:-2,1:-1]))</span><br><span class=\"line\">    u[0,:]=1</span><br><span class=\"line\">    u[-1,:]=1</span><br><span class=\"line\">    u[:,0]=1</span><br><span class=\"line\">    u[:,-1]=1</span><br><span class=\"line\">    </span><br><span class=\"line\">    v[0,:]=1</span><br><span class=\"line\">    v[-1,:]=1</span><br><span class=\"line\">    v[:,0]=1</span><br><span class=\"line\">    v[:,-1]=1</span><br></pre></td></tr></table></figure>\n<h3 id=\"画出最终图形\"><a href=\"#画出最终图形\" class=\"headerlink\" title=\"画出最终图形\"></a>画出最终图形</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig=plt.figure(figsize=(11,7),dpi=100)</span><br><span class=\"line\">ax=fig.gca(projection=&apos;3d&apos;)</span><br><span class=\"line\">X,Y=np.meshgrid(x,y)</span><br><span class=\"line\">ax.plot_surface(X,Y,u,cmap=cm.viridis,rstride=1,cstride=1)</span><br><span class=\"line\">ax.plot_surface(X,Y,v,cmap=cm.viridis,rstride=1,cstride=1)</span><br><span class=\"line\">ax.set_xlabel=(&apos;$x$&apos;)</span><br><span class=\"line\">ax.set_ylabel=(&apos;$y$&apos;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://cfd.red/?/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%E6%9C%80%E7%BB%88%E5%9B%BE%E5%BD%A2.svg\" alt=\"最终图形\"></p>\n<h4 id=\"此次迭代运行时间为-0-01237304888854851秒\"><a href=\"#此次迭代运行时间为-0-01237304888854851秒\" class=\"headerlink\" title=\"此次迭代运行时间为 0.01237304888854851秒\"></a>此次迭代运行时间为 0.01237304888854851秒</h4>","site":{"data":{}},"excerpt":"<h3 id=\"博格斯方程的特点\"><a href=\"#博格斯方程的特点\" class=\"headerlink\" title=\"博格斯方程的特点\"></a>博格斯方程的特点</h3><p>在初始条件为光滑时，仍会产生不连续的解，即会产生震荡<br>如下为其PDE方程<br>$$\\frac{\\partial u}{\\partial t}+u\\frac{\\partial u}{\\partial x}+v\\frac{\\partial u}{\\partial y}=\\nu \\left( \\frac{\\partial ^2u}{\\partial x^2}+\\frac{\\partial ^2u}{\\partial y^2} \\right) $$<br>$$\\frac{\\partial v}{\\partial t}+u\\frac{\\partial v}{\\partial x}+v\\frac{\\partial v}{\\partial y}=\\nu \\left( \\frac{\\partial ^2v}{\\partial x^2}+\\frac{\\partial ^2v}{\\partial y^2} \\right) $$<br>","more":"</p>\n<h3 id=\"其离散方程如下\"><a href=\"#其离散方程如下\" class=\"headerlink\" title=\"其离散方程如下\"></a>其离散方程如下</h3><p>$$\\frac{u_{i,j}^{n+1}-u_{i,j}^{n}}{\\varDelta t}+u_{i,j}^{n}\\frac{u_{i,j}^{n}-u_{i-\\text{1,}j}^{n}}{\\varDelta x}+v_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i,j-1}^{n}}{\\varDelta y}=\\nu \\left( \\frac{u_{i+\\text{1,}j}^{n}-2u_{i,j}^{n}+u_{i-\\text{1,}j}^{n}}{\\varDelta x^2}+\\frac{u_{i,j+1}^{n}-2u_{i,j}^{n}+u_{i,j-1}^{n}}{\\varDelta y^2} \\right) $$<br>$$\\frac{v_{i,j}^{n+1}-v_{i,j}^{n}}{\\varDelta t}+u_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i-\\text{1,}j}^{n}}{\\varDelta x}+v_{i,j}^{n}\\frac{v_{i,j}^{n}-v_{i,j-1}^{n}}{\\varDelta y}=\\nu \\left( \\frac{v_{i+\\text{1,}j}^{n}-2v_{i,j}^{n}+v_{i-\\text{1,}j}^{n}}{\\varDelta x^2}+\\frac{v_{i,j+1}^{n}-2v_{i,j}^{n}+v_{i,j-1}^{n}}{\\varDelta y^2} \\right) $$</p>\n<h3 id=\"将离散方程整理可得\"><a href=\"#将离散方程整理可得\" class=\"headerlink\" title=\"将离散方程整理可得\"></a>将离散方程整理可得</h3><p>$$u_{i,j}^{n+1}=u_{i,j}^{n}-\\frac{\\varDelta t}{\\varDelta x}u_{i,j}^{n}\\left( u_{i,j}^{n}-u_{i-\\text{1,}j}^{n} \\right) -\\frac{\\varDelta t}{\\varDelta y}v_{i,j}^{n}\\left( u_{i,j}^{n}-u_{i,j-1}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta x^2}\\left( u_{i+\\text{1,}j}^{n}+2u_{i,j}^{n}+u_{i-\\text{1,}j}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta y^2}\\left( u_{i,j+1}^{n}+2u_{i,j}^{n}+u_{i,j-1}^{n} \\right) $$<br>$$v_{i,j}^{n+1}=v_{i,j}^{n}-\\frac{\\varDelta t}{\\varDelta x}u_{i,j}^{n}\\left( v_{i,j}^{n}-v_{i-\\text{1,}j}^{n} \\right) -\\frac{\\varDelta t}{\\varDelta y}v_{i,j}^{n}\\left( v_{i,j}^{n}-v_{i,j-1}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta x^2}\\left( v_{i+\\text{1,}j}^{n}+2v_{i,j}^{n}+v_{i-\\text{1,}j}^{n} \\right) +\\nu \\frac{\\varDelta t}{\\varDelta y^2}\\left( v_{i,j+1}^{n}+2v_{i,j}^{n}+v_{i,j-1}^{n} \\right) $$</p>\n<h2 id=\"编程求解\"><a href=\"#编程求解\" class=\"headerlink\" title=\"编程求解\"></a>编程求解</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">import matplotlib.cm as cm</span><br><span class=\"line\">from mpl_toolkits.mplot3d import Axes3D</span><br><span class=\"line\">import time</span><br><span class=\"line\">nx=41</span><br><span class=\"line\">ny=41</span><br><span class=\"line\">nt=120</span><br><span class=\"line\">c=1</span><br><span class=\"line\">dx=2/(nx-1)</span><br><span class=\"line\">dy=2/(ny-1)</span><br><span class=\"line\">sigma=.0009</span><br><span class=\"line\">nu=0.01</span><br><span class=\"line\">dt=sigma*dx*dy/nu</span><br><span class=\"line\"></span><br><span class=\"line\">x=np.linspace(0,2,nx)</span><br><span class=\"line\">y=np.linspace(0,2,ny)</span><br><span class=\"line\"></span><br><span class=\"line\">u=np.ones((ny,nx))</span><br><span class=\"line\">v=np.ones((ny,nx))</span><br><span class=\"line\">un=np.ones((ny,nx))</span><br><span class=\"line\">vn=np.ones((ny,nx))</span><br><span class=\"line\">comb=np.ones((ny,nx))</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化边界条件u(.5&lt;=x&lt;=1&amp;&amp;.5&lt;=y&lt;=1)</span><br><span class=\"line\">u[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2</span><br><span class=\"line\">v[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2</span><br></pre></td></tr></table></figure>\n<h3 id=\"画出初始条件图形\"><a href=\"#画出初始条件图形\" class=\"headerlink\" title=\"画出初始条件图形\"></a>画出初始条件图形</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig=plt.figure(figsize=(11,7),dpi=100)</span><br><span class=\"line\">ax=fig.gca(projection=&apos;3d&apos;)</span><br><span class=\"line\">X,Y=np.meshgrid(x,y)</span><br><span class=\"line\">ax.plot_surface(X,Y,u[:],cmap=cm.viridis,rstride=1,cstride=1)</span><br><span class=\"line\">ax.plot_surface(X,Y,v[:],cmap=cm.viridis,rstride=1,cstride=1)</span><br><span class=\"line\">ax.set_xlabel=(&apos;$x$&apos;)</span><br><span class=\"line\">ax.set_ylabel=(&apos;$y$&apos;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://cfd.red/?/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%E5%88%9D%E5%A7%8B%E6%9D%A1%E4%BB%B6.svg\" alt=\"初始条件\"></p>\n<h3 id=\"迭代求解\"><a href=\"#迭代求解\" class=\"headerlink\" title=\"迭代求解\"></a>迭代求解</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for n in range(nt+1):</span><br><span class=\"line\">    un=u.copy()</span><br><span class=\"line\">    vn=v.copy()</span><br><span class=\"line\">    </span><br><span class=\"line\">    u[1:-1,1:-1]=(un[1:-1,1:-1]-dt/dx*un[1:-1,1:-1]*(un[1:-1,1:-1]-un[1:-1,0:-2])-dt/dy*vn[1:-1,1:-1]*(un[1:-1,1:-1]-un[0:-2,1:-1])+nu*dt/dx**2*(un[1:-1,2:]-2*un[1:-1,1:-1]+un[1:-1,0:-2])+nu*dt/dy**2*(un[2:,1:-1]-2*un[1:-1,1:-1]+un[0:-2,1:-1]))</span><br><span class=\"line\">    v[1:-1,1:-1]=(vn[1:-1,1:-1]-dt/dx*un[1:-1,1:-1]*(un[1:-1,1:-1]-un[1:-1,0:-2])-dt/dy*vn[1:-1,1:-1]*(un[1:-1,1:-1]-un[0:-2,1:-1])+nu*dt/dx**2*(vn[1:-1,2:]-2*vn[1:-1,1:-1]+vn[1:-1,0:-2])+nu*dt/dy**2*(vn[2:,1:-1]-2*vn[1:-1,1:-1]+vn[0:-2,1:-1]))</span><br><span class=\"line\">    u[0,:]=1</span><br><span class=\"line\">    u[-1,:]=1</span><br><span class=\"line\">    u[:,0]=1</span><br><span class=\"line\">    u[:,-1]=1</span><br><span class=\"line\">    </span><br><span class=\"line\">    v[0,:]=1</span><br><span class=\"line\">    v[-1,:]=1</span><br><span class=\"line\">    v[:,0]=1</span><br><span class=\"line\">    v[:,-1]=1</span><br></pre></td></tr></table></figure>\n<h3 id=\"画出最终图形\"><a href=\"#画出最终图形\" class=\"headerlink\" title=\"画出最终图形\"></a>画出最终图形</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig=plt.figure(figsize=(11,7),dpi=100)</span><br><span class=\"line\">ax=fig.gca(projection=&apos;3d&apos;)</span><br><span class=\"line\">X,Y=np.meshgrid(x,y)</span><br><span class=\"line\">ax.plot_surface(X,Y,u,cmap=cm.viridis,rstride=1,cstride=1)</span><br><span class=\"line\">ax.plot_surface(X,Y,v,cmap=cm.viridis,rstride=1,cstride=1)</span><br><span class=\"line\">ax.set_xlabel=(&apos;$x$&apos;)</span><br><span class=\"line\">ax.set_ylabel=(&apos;$y$&apos;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://cfd.red/?/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%E6%9C%80%E7%BB%88%E5%9B%BE%E5%BD%A2.svg\" alt=\"最终图形\"></p>\n<h4 id=\"此次迭代运行时间为-0-01237304888854851秒\"><a href=\"#此次迭代运行时间为-0-01237304888854851秒\" class=\"headerlink\" title=\"此次迭代运行时间为 0.01237304888854851秒\"></a>此次迭代运行时间为 0.01237304888854851秒</h4>"},{"title":"一维非线性对流方程","date":"2018-11-03T07:40:00.000Z","_content":"一维线性对流方程是cfd中最简单、最基础的控制方程，上篇文章讲到了一维线性对流方程，本次文章讲解一维非线性对流方程\n$$\\frac{\\partial u}{\\partial t}+u\\frac{\\partial u}{\\partial x}=0$$  \n从式中可以看到，原线性对流方程中的固定波速变成了u，成为了非定常值，下面来介绍其离散方法  \n<!--more-->\n## 数值离散\n对时间项向前差分，空间项使用向后差分\n$$\\frac{u^{n+1}_i-u^n_i}{\\Delta t}+u^n_i\\frac{u^n_i-u^n_{i-1}}{\\Delta x}=0$$  \n整理可得\n$$u^{n+1}_i=u^n_i-u^n_i\\frac{\\Delta t}{\\Delta x}(u^n_i-u^n_{i-1})$$  \n### 初始条件\n定义域为（0,2），在[0.5,1]范围内，U=2,其他区间内，U均为1  \n## 编程求解\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnx=41 #空间节点\ndx=2/(nx-1) #空间步长\nnt=20 #时间节点\ndt=0.025 #时间步长\n\nu=np.ones(nx)\nu[int(0.5/dx):int(1/dx+1)]=2\nun=np.ones(nx)\n\nfor n in range(nt):\n    un=u.copy()\n    for i in range(1,nx):\n        u[i]=un[i]-un[i]*(un[i]-un[i-1])*dt/dx\nplt.legend(fontsize=12)\nplt.xlabel('时间',fontsize=12)\nplt.ylabel('波高',fontsize=12)\nplt.show()\n\n```\n### 最终波形\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/%E4%B8%80%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B.svg)  \n本文参考自[CFDPython](http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/02_Step_2.ipynb)","source":"_posts/一维非线性对流方程.md","raw":"---\ntitle: 一维非线性对流方程\ncategories: CFD\ntags: Python\ndate: 2018-11-03 15:40:00\n---\n一维线性对流方程是cfd中最简单、最基础的控制方程，上篇文章讲到了一维线性对流方程，本次文章讲解一维非线性对流方程\n$$\\frac{\\partial u}{\\partial t}+u\\frac{\\partial u}{\\partial x}=0$$  \n从式中可以看到，原线性对流方程中的固定波速变成了u，成为了非定常值，下面来介绍其离散方法  \n<!--more-->\n## 数值离散\n对时间项向前差分，空间项使用向后差分\n$$\\frac{u^{n+1}_i-u^n_i}{\\Delta t}+u^n_i\\frac{u^n_i-u^n_{i-1}}{\\Delta x}=0$$  \n整理可得\n$$u^{n+1}_i=u^n_i-u^n_i\\frac{\\Delta t}{\\Delta x}(u^n_i-u^n_{i-1})$$  \n### 初始条件\n定义域为（0,2），在[0.5,1]范围内，U=2,其他区间内，U均为1  \n## 编程求解\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnx=41 #空间节点\ndx=2/(nx-1) #空间步长\nnt=20 #时间节点\ndt=0.025 #时间步长\n\nu=np.ones(nx)\nu[int(0.5/dx):int(1/dx+1)]=2\nun=np.ones(nx)\n\nfor n in range(nt):\n    un=u.copy()\n    for i in range(1,nx):\n        u[i]=un[i]-un[i]*(un[i]-un[i-1])*dt/dx\nplt.legend(fontsize=12)\nplt.xlabel('时间',fontsize=12)\nplt.ylabel('波高',fontsize=12)\nplt.show()\n\n```\n### 最终波形\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/%E4%B8%80%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B.svg)  \n本文参考自[CFDPython](http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/02_Step_2.ipynb)","slug":"一维非线性对流方程","published":1,"updated":"2018-11-03T08:33:19.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp9tjjdy0006b8umdp77l4bt","content":"<p>一维线性对流方程是cfd中最简单、最基础的控制方程，上篇文章讲到了一维线性对流方程，本次文章讲解一维非线性对流方程<br>$$\\frac{\\partial u}{\\partial t}+u\\frac{\\partial u}{\\partial x}=0$$<br>从式中可以看到，原线性对流方程中的固定波速变成了u，成为了非定常值，下面来介绍其离散方法<br><a id=\"more\"></a></p>\n<h2 id=\"数值离散\"><a href=\"#数值离散\" class=\"headerlink\" title=\"数值离散\"></a>数值离散</h2><p>对时间项向前差分，空间项使用向后差分<br>$$\\frac{u^{n+1}_i-u^n_i}{\\Delta t}+u^n_i\\frac{u^n_i-u^n_{i-1}}{\\Delta x}=0$$<br>整理可得<br>$$u^{n+1}_i=u^n_i-u^n_i\\frac{\\Delta t}{\\Delta x}(u^n_i-u^n_{i-1})$$  </p>\n<h3 id=\"初始条件\"><a href=\"#初始条件\" class=\"headerlink\" title=\"初始条件\"></a>初始条件</h3><p>定义域为（0,2），在[0.5,1]范围内，U=2,其他区间内，U均为1  </p>\n<h2 id=\"编程求解\"><a href=\"#编程求解\" class=\"headerlink\" title=\"编程求解\"></a>编程求解</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\"></span><br><span class=\"line\">nx=41 #空间节点</span><br><span class=\"line\">dx=2/(nx-1) #空间步长</span><br><span class=\"line\">nt=20 #时间节点</span><br><span class=\"line\">dt=0.025 #时间步长</span><br><span class=\"line\"></span><br><span class=\"line\">u=np.ones(nx)</span><br><span class=\"line\">u[int(0.5/dx):int(1/dx+1)]=2</span><br><span class=\"line\">un=np.ones(nx)</span><br><span class=\"line\"></span><br><span class=\"line\">for n in range(nt):</span><br><span class=\"line\">    un=u.copy()</span><br><span class=\"line\">    for i in range(1,nx):</span><br><span class=\"line\">        u[i]=un[i]-un[i]*(un[i]-un[i-1])*dt/dx</span><br><span class=\"line\">plt.legend(fontsize=12)</span><br><span class=\"line\">plt.xlabel(&apos;时间&apos;,fontsize=12)</span><br><span class=\"line\">plt.ylabel(&apos;波高&apos;,fontsize=12)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"最终波形\"><a href=\"#最终波形\" class=\"headerlink\" title=\"最终波形\"></a>最终波形</h3><p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/%E4%B8%80%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B.svg\" alt=\"图片\"><br>本文参考自<a href=\"http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/02_Step_2.ipynb\" target=\"_blank\" rel=\"noopener\">CFDPython</a></p>\n","site":{"data":{}},"excerpt":"<p>一维线性对流方程是cfd中最简单、最基础的控制方程，上篇文章讲到了一维线性对流方程，本次文章讲解一维非线性对流方程<br>$$\\frac{\\partial u}{\\partial t}+u\\frac{\\partial u}{\\partial x}=0$$<br>从式中可以看到，原线性对流方程中的固定波速变成了u，成为了非定常值，下面来介绍其离散方法<br>","more":"</p>\n<h2 id=\"数值离散\"><a href=\"#数值离散\" class=\"headerlink\" title=\"数值离散\"></a>数值离散</h2><p>对时间项向前差分，空间项使用向后差分<br>$$\\frac{u^{n+1}_i-u^n_i}{\\Delta t}+u^n_i\\frac{u^n_i-u^n_{i-1}}{\\Delta x}=0$$<br>整理可得<br>$$u^{n+1}_i=u^n_i-u^n_i\\frac{\\Delta t}{\\Delta x}(u^n_i-u^n_{i-1})$$  </p>\n<h3 id=\"初始条件\"><a href=\"#初始条件\" class=\"headerlink\" title=\"初始条件\"></a>初始条件</h3><p>定义域为（0,2），在[0.5,1]范围内，U=2,其他区间内，U均为1  </p>\n<h2 id=\"编程求解\"><a href=\"#编程求解\" class=\"headerlink\" title=\"编程求解\"></a>编程求解</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\"></span><br><span class=\"line\">nx=41 #空间节点</span><br><span class=\"line\">dx=2/(nx-1) #空间步长</span><br><span class=\"line\">nt=20 #时间节点</span><br><span class=\"line\">dt=0.025 #时间步长</span><br><span class=\"line\"></span><br><span class=\"line\">u=np.ones(nx)</span><br><span class=\"line\">u[int(0.5/dx):int(1/dx+1)]=2</span><br><span class=\"line\">un=np.ones(nx)</span><br><span class=\"line\"></span><br><span class=\"line\">for n in range(nt):</span><br><span class=\"line\">    un=u.copy()</span><br><span class=\"line\">    for i in range(1,nx):</span><br><span class=\"line\">        u[i]=un[i]-un[i]*(un[i]-un[i-1])*dt/dx</span><br><span class=\"line\">plt.legend(fontsize=12)</span><br><span class=\"line\">plt.xlabel(&apos;时间&apos;,fontsize=12)</span><br><span class=\"line\">plt.ylabel(&apos;波高&apos;,fontsize=12)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"最终波形\"><a href=\"#最终波形\" class=\"headerlink\" title=\"最终波形\"></a>最终波形</h3><p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/%E4%B8%80%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B.svg\" alt=\"图片\"><br>本文参考自<a href=\"http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/02_Step_2.ipynb\" target=\"_blank\" rel=\"noopener\">CFDPython</a></p>"},{"title":"二维对流方程","date":"2018-11-05T07:16:00.000Z","_content":"二维对流方程的控制方程如下  \n$$\\frac{\\partial u}{\\partial t}+u \\frac{\\partial u}{\\partial x}+v \\frac{\\partial u}{\\partial y}=0$$  \n$$\\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = 0$$\n<!--more-->\n方程离散形式和一维对流方程一样，时间项采用向前差分，空间项采用向后差分的方法。\n## 方程离散  \n$$\\frac{u_{i,j}^{n+1}-u_{i,j}^n}{\\Delta t} + u_{i,j}^n \\frac{u_{i,j}^n-u_{i-1,j}^n}{\\Delta x} + v_{i,j}^n \\frac{u_{i,j}^n-u_{i,j-1}^n}{\\Delta y} = 0$$\n$$\\frac{v_{i,j}^{n+1}-v_{i,j}^n}{\\Delta t} + u_{i,j}^n \\frac{v_{i,j}^n-v_{i-1,j}^n}{\\Delta x} + v_{i,j}^n \\frac{v_{i,j}^n-v_{i,j-1}^n}{\\Delta y} = 0$$ \n整理后可得   \n$$u_{i,j}^{n+1} = u_{i,j}^n - u_{i,j} \\frac{\\Delta t}{\\Delta x} (u_{i,j}^n-u_{i-1,j}^n) - v_{i,j}^n \\frac{\\Delta t}{\\Delta y} (u_{i,j}^n-u_{i,j-1}^n)$$\n$$v_{i,j}^{n+1} = v_{i,j}^n - u_{i,j} \\frac{\\Delta t}{\\Delta x} (v_{i,j}^n-v_{i-1,j}^n) - v_{i,j}^n \\frac{\\Delta t}{\\Delta y} (v_{i,j}^n-v_{i,j-1}^n)$$\n## 初始条件\n$$u(x,y)=\\begin{cases}\n2,\\quad x\\geq 0.5,y\\leq 1\\newline\n1,\\quad 其他\n\\end{cases}$$\n## 边界条件\n$$u=0\\quad for\\begin{cases}\nx=0,2\\newline\ny=0,2\n\\end{cases}$$\n## 编程求解\n### 数值离散\n```\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport time\n#方程离散\nnx=81\nny=81\nnt=100\nc=1\ndx=2/(nx-1)\ndy=2/(ny-1)\nsigma=0.2\ndt=sigma*dx\n\nx=np.linspace(0,2,nx)\ny=np.linspace(0,2,ny)\n\nu=np.ones((ny,nx))\nun=np.ones((ny,nx))\n```\n### 初始条件  \n```\nu[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2\nX,Y=np.meshgrid(x,y)\nfig=plt.figure(figsize=(11,7),dpi=100)\nax=fig.gca(projection='3d')\nsurf=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)\n```\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/CFD/%E4%BA%8C%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B%28%E5%88%9D%E5%A7%8B%E6%9D%A1%E4%BB%B6%29.svg)\n\n### 循环迭代求解\n```\nstart=time.clock()\nfor n in range(nt+1): #时间步循环\n    un=u.copy()\n    row,col=u.shape\n    for j in range(1,row):\n        for i in range(1,col):\n            u[j,i]=(un[j,i]-(c*dt/dx*(un[j,i]-un[j,i-1]))-(c*dt/dy*(un[j,i]-un[j-1,i])))\n            u[0,:]=1\n            u[-1,:]=1\n            u[:,0]=1\n            u[:,-1]=1\nend=time.clock()\ntime_elapsed=end-start\nprint(time_elapsed)\nfig=plt.figure(figsize=(11,7),dpi=100)\nax=fig.gca(projection='3d')\nsurf2=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)\n```\n### 数组迭代求解\n\n```\nstart=time.clock()\nfor n in range(nt+1):\n    un=u.copy()\n    u[1:,1:]=(un[1:,1:]-(c*dt/dx*(un[1:,1:]-un[1:,:-1]))-(c*dt/dy*(un[1:,1:]-un[:-1,1:])))\n    u[0,:]=1\n    u[-1,:]=1\n    u[:,0]=1\n    u[:,-1]=1\nend=time.clock()\ntime_elapsed=end-start\nprint(time_elapsed)\nfig=plt.figure(figsize=(11,7),dpi=100)\nax=fig.gca(projection='3d')\nsurf2=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)  \n\n```\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/CFD/%E4%BA%8C%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B%28%E7%BB%93%E6%9E%9C%29.svg)\n\n## 所用时间分析\n其中循环迭代用时2.008529353537142秒，数组迭代用时0.008145353428062663秒，循环迭代用时为数组迭代的246.58590585121635倍，说明在写代码过程中应尽量使用数组迭代\n本文参考自[CFDPython](http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/08_Step_6.ipynb)","source":"_posts/二维对流方程.md","raw":"---\ntitle: 二维对流方程\ncategories: CFD\ntags: Python\ndate: 2018-11-05 15:16:00\n---\n二维对流方程的控制方程如下  \n$$\\frac{\\partial u}{\\partial t}+u \\frac{\\partial u}{\\partial x}+v \\frac{\\partial u}{\\partial y}=0$$  \n$$\\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = 0$$\n<!--more-->\n方程离散形式和一维对流方程一样，时间项采用向前差分，空间项采用向后差分的方法。\n## 方程离散  \n$$\\frac{u_{i,j}^{n+1}-u_{i,j}^n}{\\Delta t} + u_{i,j}^n \\frac{u_{i,j}^n-u_{i-1,j}^n}{\\Delta x} + v_{i,j}^n \\frac{u_{i,j}^n-u_{i,j-1}^n}{\\Delta y} = 0$$\n$$\\frac{v_{i,j}^{n+1}-v_{i,j}^n}{\\Delta t} + u_{i,j}^n \\frac{v_{i,j}^n-v_{i-1,j}^n}{\\Delta x} + v_{i,j}^n \\frac{v_{i,j}^n-v_{i,j-1}^n}{\\Delta y} = 0$$ \n整理后可得   \n$$u_{i,j}^{n+1} = u_{i,j}^n - u_{i,j} \\frac{\\Delta t}{\\Delta x} (u_{i,j}^n-u_{i-1,j}^n) - v_{i,j}^n \\frac{\\Delta t}{\\Delta y} (u_{i,j}^n-u_{i,j-1}^n)$$\n$$v_{i,j}^{n+1} = v_{i,j}^n - u_{i,j} \\frac{\\Delta t}{\\Delta x} (v_{i,j}^n-v_{i-1,j}^n) - v_{i,j}^n \\frac{\\Delta t}{\\Delta y} (v_{i,j}^n-v_{i,j-1}^n)$$\n## 初始条件\n$$u(x,y)=\\begin{cases}\n2,\\quad x\\geq 0.5,y\\leq 1\\newline\n1,\\quad 其他\n\\end{cases}$$\n## 边界条件\n$$u=0\\quad for\\begin{cases}\nx=0,2\\newline\ny=0,2\n\\end{cases}$$\n## 编程求解\n### 数值离散\n```\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport time\n#方程离散\nnx=81\nny=81\nnt=100\nc=1\ndx=2/(nx-1)\ndy=2/(ny-1)\nsigma=0.2\ndt=sigma*dx\n\nx=np.linspace(0,2,nx)\ny=np.linspace(0,2,ny)\n\nu=np.ones((ny,nx))\nun=np.ones((ny,nx))\n```\n### 初始条件  \n```\nu[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2\nX,Y=np.meshgrid(x,y)\nfig=plt.figure(figsize=(11,7),dpi=100)\nax=fig.gca(projection='3d')\nsurf=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)\n```\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/CFD/%E4%BA%8C%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B%28%E5%88%9D%E5%A7%8B%E6%9D%A1%E4%BB%B6%29.svg)\n\n### 循环迭代求解\n```\nstart=time.clock()\nfor n in range(nt+1): #时间步循环\n    un=u.copy()\n    row,col=u.shape\n    for j in range(1,row):\n        for i in range(1,col):\n            u[j,i]=(un[j,i]-(c*dt/dx*(un[j,i]-un[j,i-1]))-(c*dt/dy*(un[j,i]-un[j-1,i])))\n            u[0,:]=1\n            u[-1,:]=1\n            u[:,0]=1\n            u[:,-1]=1\nend=time.clock()\ntime_elapsed=end-start\nprint(time_elapsed)\nfig=plt.figure(figsize=(11,7),dpi=100)\nax=fig.gca(projection='3d')\nsurf2=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)\n```\n### 数组迭代求解\n\n```\nstart=time.clock()\nfor n in range(nt+1):\n    un=u.copy()\n    u[1:,1:]=(un[1:,1:]-(c*dt/dx*(un[1:,1:]-un[1:,:-1]))-(c*dt/dy*(un[1:,1:]-un[:-1,1:])))\n    u[0,:]=1\n    u[-1,:]=1\n    u[:,0]=1\n    u[:,-1]=1\nend=time.clock()\ntime_elapsed=end-start\nprint(time_elapsed)\nfig=plt.figure(figsize=(11,7),dpi=100)\nax=fig.gca(projection='3d')\nsurf2=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)  \n\n```\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/CFD/%E4%BA%8C%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B%28%E7%BB%93%E6%9E%9C%29.svg)\n\n## 所用时间分析\n其中循环迭代用时2.008529353537142秒，数组迭代用时0.008145353428062663秒，循环迭代用时为数组迭代的246.58590585121635倍，说明在写代码过程中应尽量使用数组迭代\n本文参考自[CFDPython](http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/08_Step_6.ipynb)","slug":"二维对流方程","published":1,"updated":"2018-11-05T09:20:31.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp9tjje00009b8umy7dq6kge","content":"<p>二维对流方程的控制方程如下<br>$$\\frac{\\partial u}{\\partial t}+u \\frac{\\partial u}{\\partial x}+v \\frac{\\partial u}{\\partial y}=0$$<br>$$\\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = 0$$<br><a id=\"more\"></a><br>方程离散形式和一维对流方程一样，时间项采用向前差分，空间项采用向后差分的方法。</p>\n<h2 id=\"方程离散\"><a href=\"#方程离散\" class=\"headerlink\" title=\"方程离散\"></a>方程离散</h2><p>$$\\frac{u_{i,j}^{n+1}-u_{i,j}^n}{\\Delta t} + u_{i,j}^n \\frac{u_{i,j}^n-u_{i-1,j}^n}{\\Delta x} + v_{i,j}^n \\frac{u_{i,j}^n-u_{i,j-1}^n}{\\Delta y} = 0$$<br>$$\\frac{v_{i,j}^{n+1}-v_{i,j}^n}{\\Delta t} + u_{i,j}^n \\frac{v_{i,j}^n-v_{i-1,j}^n}{\\Delta x} + v_{i,j}^n \\frac{v_{i,j}^n-v_{i,j-1}^n}{\\Delta y} = 0$$<br>整理后可得<br>$$u_{i,j}^{n+1} = u_{i,j}^n - u_{i,j} \\frac{\\Delta t}{\\Delta x} (u_{i,j}^n-u_{i-1,j}^n) - v_{i,j}^n \\frac{\\Delta t}{\\Delta y} (u_{i,j}^n-u_{i,j-1}^n)$$<br>$$v_{i,j}^{n+1} = v_{i,j}^n - u_{i,j} \\frac{\\Delta t}{\\Delta x} (v_{i,j}^n-v_{i-1,j}^n) - v_{i,j}^n \\frac{\\Delta t}{\\Delta y} (v_{i,j}^n-v_{i,j-1}^n)$$</p>\n<h2 id=\"初始条件\"><a href=\"#初始条件\" class=\"headerlink\" title=\"初始条件\"></a>初始条件</h2><p>$$u(x,y)=\\begin{cases}<br>2,\\quad x\\geq 0.5,y\\leq 1\\newline<br>1,\\quad 其他<br>\\end{cases}$$</p>\n<h2 id=\"边界条件\"><a href=\"#边界条件\" class=\"headerlink\" title=\"边界条件\"></a>边界条件</h2><p>$$u=0\\quad for\\begin{cases}<br>x=0,2\\newline<br>y=0,2<br>\\end{cases}$$</p>\n<h2 id=\"编程求解\"><a href=\"#编程求解\" class=\"headerlink\" title=\"编程求解\"></a>编程求解</h2><h3 id=\"数值离散\"><a href=\"#数值离散\" class=\"headerlink\" title=\"数值离散\"></a>数值离散</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from mpl_toolkits.mplot3d import Axes3D</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">from matplotlib import cm</span><br><span class=\"line\">import time</span><br><span class=\"line\">#方程离散</span><br><span class=\"line\">nx=81</span><br><span class=\"line\">ny=81</span><br><span class=\"line\">nt=100</span><br><span class=\"line\">c=1</span><br><span class=\"line\">dx=2/(nx-1)</span><br><span class=\"line\">dy=2/(ny-1)</span><br><span class=\"line\">sigma=0.2</span><br><span class=\"line\">dt=sigma*dx</span><br><span class=\"line\"></span><br><span class=\"line\">x=np.linspace(0,2,nx)</span><br><span class=\"line\">y=np.linspace(0,2,ny)</span><br><span class=\"line\"></span><br><span class=\"line\">u=np.ones((ny,nx))</span><br><span class=\"line\">un=np.ones((ny,nx))</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始条件-1\"><a href=\"#初始条件-1\" class=\"headerlink\" title=\"初始条件\"></a>初始条件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2</span><br><span class=\"line\">X,Y=np.meshgrid(x,y)</span><br><span class=\"line\">fig=plt.figure(figsize=(11,7),dpi=100)</span><br><span class=\"line\">ax=fig.gca(projection=&apos;3d&apos;)</span><br><span class=\"line\">surf=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/CFD/%E4%BA%8C%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B%28%E5%88%9D%E5%A7%8B%E6%9D%A1%E4%BB%B6%29.svg\" alt=\"图片\"></p>\n<h3 id=\"循环迭代求解\"><a href=\"#循环迭代求解\" class=\"headerlink\" title=\"循环迭代求解\"></a>循环迭代求解</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start=time.clock()</span><br><span class=\"line\">for n in range(nt+1): #时间步循环</span><br><span class=\"line\">    un=u.copy()</span><br><span class=\"line\">    row,col=u.shape</span><br><span class=\"line\">    for j in range(1,row):</span><br><span class=\"line\">        for i in range(1,col):</span><br><span class=\"line\">            u[j,i]=(un[j,i]-(c*dt/dx*(un[j,i]-un[j,i-1]))-(c*dt/dy*(un[j,i]-un[j-1,i])))</span><br><span class=\"line\">            u[0,:]=1</span><br><span class=\"line\">            u[-1,:]=1</span><br><span class=\"line\">            u[:,0]=1</span><br><span class=\"line\">            u[:,-1]=1</span><br><span class=\"line\">end=time.clock()</span><br><span class=\"line\">time_elapsed=end-start</span><br><span class=\"line\">print(time_elapsed)</span><br><span class=\"line\">fig=plt.figure(figsize=(11,7),dpi=100)</span><br><span class=\"line\">ax=fig.gca(projection=&apos;3d&apos;)</span><br><span class=\"line\">surf2=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组迭代求解\"><a href=\"#数组迭代求解\" class=\"headerlink\" title=\"数组迭代求解\"></a>数组迭代求解</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start=time.clock()</span><br><span class=\"line\">for n in range(nt+1):</span><br><span class=\"line\">    un=u.copy()</span><br><span class=\"line\">    u[1:,1:]=(un[1:,1:]-(c*dt/dx*(un[1:,1:]-un[1:,:-1]))-(c*dt/dy*(un[1:,1:]-un[:-1,1:])))</span><br><span class=\"line\">    u[0,:]=1</span><br><span class=\"line\">    u[-1,:]=1</span><br><span class=\"line\">    u[:,0]=1</span><br><span class=\"line\">    u[:,-1]=1</span><br><span class=\"line\">end=time.clock()</span><br><span class=\"line\">time_elapsed=end-start</span><br><span class=\"line\">print(time_elapsed)</span><br><span class=\"line\">fig=plt.figure(figsize=(11,7),dpi=100)</span><br><span class=\"line\">ax=fig.gca(projection=&apos;3d&apos;)</span><br><span class=\"line\">surf2=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/CFD/%E4%BA%8C%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B%28%E7%BB%93%E6%9E%9C%29.svg\" alt=\"图片\"></p>\n<h2 id=\"所用时间分析\"><a href=\"#所用时间分析\" class=\"headerlink\" title=\"所用时间分析\"></a>所用时间分析</h2><p>其中循环迭代用时2.008529353537142秒，数组迭代用时0.008145353428062663秒，循环迭代用时为数组迭代的246.58590585121635倍，说明在写代码过程中应尽量使用数组迭代<br>本文参考自<a href=\"http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/08_Step_6.ipynb\" target=\"_blank\" rel=\"noopener\">CFDPython</a></p>\n","site":{"data":{}},"excerpt":"<p>二维对流方程的控制方程如下<br>$$\\frac{\\partial u}{\\partial t}+u \\frac{\\partial u}{\\partial x}+v \\frac{\\partial u}{\\partial y}=0$$<br>$$\\frac{\\partial v}{\\partial t} + u \\frac{\\partial v}{\\partial x} + v \\frac{\\partial v}{\\partial y} = 0$$<br>","more":"<br>方程离散形式和一维对流方程一样，时间项采用向前差分，空间项采用向后差分的方法。</p>\n<h2 id=\"方程离散\"><a href=\"#方程离散\" class=\"headerlink\" title=\"方程离散\"></a>方程离散</h2><p>$$\\frac{u_{i,j}^{n+1}-u_{i,j}^n}{\\Delta t} + u_{i,j}^n \\frac{u_{i,j}^n-u_{i-1,j}^n}{\\Delta x} + v_{i,j}^n \\frac{u_{i,j}^n-u_{i,j-1}^n}{\\Delta y} = 0$$<br>$$\\frac{v_{i,j}^{n+1}-v_{i,j}^n}{\\Delta t} + u_{i,j}^n \\frac{v_{i,j}^n-v_{i-1,j}^n}{\\Delta x} + v_{i,j}^n \\frac{v_{i,j}^n-v_{i,j-1}^n}{\\Delta y} = 0$$<br>整理后可得<br>$$u_{i,j}^{n+1} = u_{i,j}^n - u_{i,j} \\frac{\\Delta t}{\\Delta x} (u_{i,j}^n-u_{i-1,j}^n) - v_{i,j}^n \\frac{\\Delta t}{\\Delta y} (u_{i,j}^n-u_{i,j-1}^n)$$<br>$$v_{i,j}^{n+1} = v_{i,j}^n - u_{i,j} \\frac{\\Delta t}{\\Delta x} (v_{i,j}^n-v_{i-1,j}^n) - v_{i,j}^n \\frac{\\Delta t}{\\Delta y} (v_{i,j}^n-v_{i,j-1}^n)$$</p>\n<h2 id=\"初始条件\"><a href=\"#初始条件\" class=\"headerlink\" title=\"初始条件\"></a>初始条件</h2><p>$$u(x,y)=\\begin{cases}<br>2,\\quad x\\geq 0.5,y\\leq 1\\newline<br>1,\\quad 其他<br>\\end{cases}$$</p>\n<h2 id=\"边界条件\"><a href=\"#边界条件\" class=\"headerlink\" title=\"边界条件\"></a>边界条件</h2><p>$$u=0\\quad for\\begin{cases}<br>x=0,2\\newline<br>y=0,2<br>\\end{cases}$$</p>\n<h2 id=\"编程求解\"><a href=\"#编程求解\" class=\"headerlink\" title=\"编程求解\"></a>编程求解</h2><h3 id=\"数值离散\"><a href=\"#数值离散\" class=\"headerlink\" title=\"数值离散\"></a>数值离散</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from mpl_toolkits.mplot3d import Axes3D</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">from matplotlib import cm</span><br><span class=\"line\">import time</span><br><span class=\"line\">#方程离散</span><br><span class=\"line\">nx=81</span><br><span class=\"line\">ny=81</span><br><span class=\"line\">nt=100</span><br><span class=\"line\">c=1</span><br><span class=\"line\">dx=2/(nx-1)</span><br><span class=\"line\">dy=2/(ny-1)</span><br><span class=\"line\">sigma=0.2</span><br><span class=\"line\">dt=sigma*dx</span><br><span class=\"line\"></span><br><span class=\"line\">x=np.linspace(0,2,nx)</span><br><span class=\"line\">y=np.linspace(0,2,ny)</span><br><span class=\"line\"></span><br><span class=\"line\">u=np.ones((ny,nx))</span><br><span class=\"line\">un=np.ones((ny,nx))</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始条件-1\"><a href=\"#初始条件-1\" class=\"headerlink\" title=\"初始条件\"></a>初始条件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u[int(.5/dy):int(1/dy+1),int(.5/dx):int(1/dx+1)]=2</span><br><span class=\"line\">X,Y=np.meshgrid(x,y)</span><br><span class=\"line\">fig=plt.figure(figsize=(11,7),dpi=100)</span><br><span class=\"line\">ax=fig.gca(projection=&apos;3d&apos;)</span><br><span class=\"line\">surf=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/CFD/%E4%BA%8C%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B%28%E5%88%9D%E5%A7%8B%E6%9D%A1%E4%BB%B6%29.svg\" alt=\"图片\"></p>\n<h3 id=\"循环迭代求解\"><a href=\"#循环迭代求解\" class=\"headerlink\" title=\"循环迭代求解\"></a>循环迭代求解</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start=time.clock()</span><br><span class=\"line\">for n in range(nt+1): #时间步循环</span><br><span class=\"line\">    un=u.copy()</span><br><span class=\"line\">    row,col=u.shape</span><br><span class=\"line\">    for j in range(1,row):</span><br><span class=\"line\">        for i in range(1,col):</span><br><span class=\"line\">            u[j,i]=(un[j,i]-(c*dt/dx*(un[j,i]-un[j,i-1]))-(c*dt/dy*(un[j,i]-un[j-1,i])))</span><br><span class=\"line\">            u[0,:]=1</span><br><span class=\"line\">            u[-1,:]=1</span><br><span class=\"line\">            u[:,0]=1</span><br><span class=\"line\">            u[:,-1]=1</span><br><span class=\"line\">end=time.clock()</span><br><span class=\"line\">time_elapsed=end-start</span><br><span class=\"line\">print(time_elapsed)</span><br><span class=\"line\">fig=plt.figure(figsize=(11,7),dpi=100)</span><br><span class=\"line\">ax=fig.gca(projection=&apos;3d&apos;)</span><br><span class=\"line\">surf2=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组迭代求解\"><a href=\"#数组迭代求解\" class=\"headerlink\" title=\"数组迭代求解\"></a>数组迭代求解</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start=time.clock()</span><br><span class=\"line\">for n in range(nt+1):</span><br><span class=\"line\">    un=u.copy()</span><br><span class=\"line\">    u[1:,1:]=(un[1:,1:]-(c*dt/dx*(un[1:,1:]-un[1:,:-1]))-(c*dt/dy*(un[1:,1:]-un[:-1,1:])))</span><br><span class=\"line\">    u[0,:]=1</span><br><span class=\"line\">    u[-1,:]=1</span><br><span class=\"line\">    u[:,0]=1</span><br><span class=\"line\">    u[:,-1]=1</span><br><span class=\"line\">end=time.clock()</span><br><span class=\"line\">time_elapsed=end-start</span><br><span class=\"line\">print(time_elapsed)</span><br><span class=\"line\">fig=plt.figure(figsize=(11,7),dpi=100)</span><br><span class=\"line\">ax=fig.gca(projection=&apos;3d&apos;)</span><br><span class=\"line\">surf2=ax.plot_surface(X,Y,u[:],cmap=cm.viridis)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/CFD/%E4%BA%8C%E7%BB%B4%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%B5%81%E6%96%B9%E7%A8%8B%28%E7%BB%93%E6%9E%9C%29.svg\" alt=\"图片\"></p>\n<h2 id=\"所用时间分析\"><a href=\"#所用时间分析\" class=\"headerlink\" title=\"所用时间分析\"></a>所用时间分析</h2><p>其中循环迭代用时2.008529353537142秒，数组迭代用时0.008145353428062663秒，循环迭代用时为数组迭代的246.58590585121635倍，说明在写代码过程中应尽量使用数组迭代<br>本文参考自<a href=\"http://nbviewer.jupyter.org/github/barbagroup/CFDPython/blob/master/lessons/08_Step_6.ipynb\" target=\"_blank\" rel=\"noopener\">CFDPython</a></p>"},{"title":"有限差分法求解偏微分方程(中心差分)","date":"2018-10-26T06:08:00.000Z","_content":"本程序使用matab2018a 运行通过\n## 常微分方程为: $$ x{\\prime}(t)=-2x(t)+t $$ \n<!--more-->\n```\nclear;\n% 将方程转换为: ax'=bx + ct\na=1.;\nb=-2.;\nc=1.;\n% 初始时间\ntinit= 0.;\ntmax=5.;\n% 步数\nmaxt = 3000;\ndt = (tmax-tinit)/maxt;\n% 初始条件\nx(2)=1.;\nx(1)=1.0-dt*((b*x(2)+c*(2)*dt)/a);\nt(2)=tinit;\n% 迭代求解\nfor j=2:(maxt+1);\nx(j+1)=x(j-1)+2.*dt*((b*x(j)+c*(j)*dt)/a);\nt(j+1)=tinit+(j-1)*dt;\nend;\nplot(t,x)\ntitle('Midpoint Method')\nxlabel('T')\nylabel('X(t)')\n```\n![avatar](https://imageone.oss-cn-beijing.aliyuncs.com/a.svg)","source":"_posts/有限差分法求解常微分方程（中心差分）.md","raw":"---\ntitle: 有限差分法求解偏微分方程(中心差分)\ncategories: 数值计算\ntags: MatLab\ndate: 2018-10-26 14:08:00\n---\n本程序使用matab2018a 运行通过\n## 常微分方程为: $$ x{\\prime}(t)=-2x(t)+t $$ \n<!--more-->\n```\nclear;\n% 将方程转换为: ax'=bx + ct\na=1.;\nb=-2.;\nc=1.;\n% 初始时间\ntinit= 0.;\ntmax=5.;\n% 步数\nmaxt = 3000;\ndt = (tmax-tinit)/maxt;\n% 初始条件\nx(2)=1.;\nx(1)=1.0-dt*((b*x(2)+c*(2)*dt)/a);\nt(2)=tinit;\n% 迭代求解\nfor j=2:(maxt+1);\nx(j+1)=x(j-1)+2.*dt*((b*x(j)+c*(j)*dt)/a);\nt(j+1)=tinit+(j-1)*dt;\nend;\nplot(t,x)\ntitle('Midpoint Method')\nxlabel('T')\nylabel('X(t)')\n```\n![avatar](https://imageone.oss-cn-beijing.aliyuncs.com/a.svg)","slug":"有限差分法求解常微分方程（中心差分）","published":1,"updated":"2018-11-01T05:10:27.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp9tjje1000bb8um0q9sm6oh","content":"<p>本程序使用matab2018a 运行通过</p>\n<h2 id=\"常微分方程为-x-prime-t-2x-t-t\"><a href=\"#常微分方程为-x-prime-t-2x-t-t\" class=\"headerlink\" title=\"常微分方程为: $$ x{\\prime}(t)=-2x(t)+t $$\"></a>常微分方程为: $$ x{\\prime}(t)=-2x(t)+t $$</h2><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear;</span><br><span class=\"line\">% 将方程转换为: ax&apos;=bx + ct</span><br><span class=\"line\">a=1.;</span><br><span class=\"line\">b=-2.;</span><br><span class=\"line\">c=1.;</span><br><span class=\"line\">% 初始时间</span><br><span class=\"line\">tinit= 0.;</span><br><span class=\"line\">tmax=5.;</span><br><span class=\"line\">% 步数</span><br><span class=\"line\">maxt = 3000;</span><br><span class=\"line\">dt = (tmax-tinit)/maxt;</span><br><span class=\"line\">% 初始条件</span><br><span class=\"line\">x(2)=1.;</span><br><span class=\"line\">x(1)=1.0-dt*((b*x(2)+c*(2)*dt)/a);</span><br><span class=\"line\">t(2)=tinit;</span><br><span class=\"line\">% 迭代求解</span><br><span class=\"line\">for j=2:(maxt+1);</span><br><span class=\"line\">x(j+1)=x(j-1)+2.*dt*((b*x(j)+c*(j)*dt)/a);</span><br><span class=\"line\">t(j+1)=tinit+(j-1)*dt;</span><br><span class=\"line\">end;</span><br><span class=\"line\">plot(t,x)</span><br><span class=\"line\">title(&apos;Midpoint Method&apos;)</span><br><span class=\"line\">xlabel(&apos;T&apos;)</span><br><span class=\"line\">ylabel(&apos;X(t)&apos;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/a.svg\" alt=\"avatar\"></p>\n","site":{"data":{}},"excerpt":"<p>本程序使用matab2018a 运行通过</p>\n<h2 id=\"常微分方程为-x-prime-t-2x-t-t\"><a href=\"#常微分方程为-x-prime-t-2x-t-t\" class=\"headerlink\" title=\"常微分方程为: $$ x{\\prime}(t)=-2x(t)+t $$\"></a>常微分方程为: $$ x{\\prime}(t)=-2x(t)+t $$</h2>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear;</span><br><span class=\"line\">% 将方程转换为: ax&apos;=bx + ct</span><br><span class=\"line\">a=1.;</span><br><span class=\"line\">b=-2.;</span><br><span class=\"line\">c=1.;</span><br><span class=\"line\">% 初始时间</span><br><span class=\"line\">tinit= 0.;</span><br><span class=\"line\">tmax=5.;</span><br><span class=\"line\">% 步数</span><br><span class=\"line\">maxt = 3000;</span><br><span class=\"line\">dt = (tmax-tinit)/maxt;</span><br><span class=\"line\">% 初始条件</span><br><span class=\"line\">x(2)=1.;</span><br><span class=\"line\">x(1)=1.0-dt*((b*x(2)+c*(2)*dt)/a);</span><br><span class=\"line\">t(2)=tinit;</span><br><span class=\"line\">% 迭代求解</span><br><span class=\"line\">for j=2:(maxt+1);</span><br><span class=\"line\">x(j+1)=x(j-1)+2.*dt*((b*x(j)+c*(j)*dt)/a);</span><br><span class=\"line\">t(j+1)=tinit+(j-1)*dt;</span><br><span class=\"line\">end;</span><br><span class=\"line\">plot(t,x)</span><br><span class=\"line\">title(&apos;Midpoint Method&apos;)</span><br><span class=\"line\">xlabel(&apos;T&apos;)</span><br><span class=\"line\">ylabel(&apos;X(t)&apos;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/a.svg\" alt=\"avatar\"></p>"},{"title":"新的开始","date":"2018-10-25T10:07:32.000Z","_content":"今天开题答辩结束，以后的硕士生活中想持续的进行CFD的学习，尤其是依托OpenFOAM进行学习。虽然本人的c++基础薄弱，CFD理论基础也很差劲，但我还是会努力的，因为我是真的喜欢CFD。人总是要有梦想的嘛，万一实现了呢？","source":"_posts/新的开始.md","raw":"---\ntitle: 新的开始\ntags: 随笔\ndate: 2018-10-25 18:07:32\n---\n今天开题答辩结束，以后的硕士生活中想持续的进行CFD的学习，尤其是依托OpenFOAM进行学习。虽然本人的c++基础薄弱，CFD理论基础也很差劲，但我还是会努力的，因为我是真的喜欢CFD。人总是要有梦想的嘛，万一实现了呢？","slug":"新的开始","published":1,"updated":"2018-10-31T04:31:36.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp9tjje3000eb8umvz49x7q2","content":"<p>今天开题答辩结束，以后的硕士生活中想持续的进行CFD的学习，尤其是依托OpenFOAM进行学习。虽然本人的c++基础薄弱，CFD理论基础也很差劲，但我还是会努力的，因为我是真的喜欢CFD。人总是要有梦想的嘛，万一实现了呢？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天开题答辩结束，以后的硕士生活中想持续的进行CFD的学习，尤其是依托OpenFOAM进行学习。虽然本人的c++基础薄弱，CFD理论基础也很差劲，但我还是会努力的，因为我是真的喜欢CFD。人总是要有梦想的嘛，万一实现了呢？</p>\n"},{"title":"有限差分法求解偏微分方程（欧拉法）","date":"2018-10-26T06:23:00.000Z","_content":"本程序使用matab2018a 运行通过\n## 常微分方程为： $$ x{\\prime}(t)=-2x(t)+t $$ \n\n<!--more-->\n```\nclear;\n% 将方程转换为: ax'=bx + ct\na=1.;\nb=-2.;\nc=1.;\n% 初始值\ntinit= 0.;\ntmax=5.;\n% 时间步长\nmaxt = 3000;\ndt = (tmax-tinit)/maxt;\n% 初始条件\nx(1)=1.;\nt(1)=tinit;\n% 迭代求解\nfor j=1:maxt;\nx(j+1)=x(j)+dt*((b*x(j)+c*(j)*dt)/a);\nt(j+1)=tinit+j*dt;\nend;\n%画图\nplot(t,x)\ntitle('Euler Method')\nxlabel('T')\nylabel('X(t)')\n```\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/a1.svg)","source":"_posts/有限差分法求解常微分方程(欧拉法).md","raw":"---\ntitle: 有限差分法求解偏微分方程（欧拉法）\ncategories: 数值计算\ntags: MatLab\ndate: 2018-10-26 14:23:00\n---\n本程序使用matab2018a 运行通过\n## 常微分方程为： $$ x{\\prime}(t)=-2x(t)+t $$ \n\n<!--more-->\n```\nclear;\n% 将方程转换为: ax'=bx + ct\na=1.;\nb=-2.;\nc=1.;\n% 初始值\ntinit= 0.;\ntmax=5.;\n% 时间步长\nmaxt = 3000;\ndt = (tmax-tinit)/maxt;\n% 初始条件\nx(1)=1.;\nt(1)=tinit;\n% 迭代求解\nfor j=1:maxt;\nx(j+1)=x(j)+dt*((b*x(j)+c*(j)*dt)/a);\nt(j+1)=tinit+j*dt;\nend;\n%画图\nplot(t,x)\ntitle('Euler Method')\nxlabel('T')\nylabel('X(t)')\n```\n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/a1.svg)","slug":"有限差分法求解常微分方程(欧拉法)","published":1,"updated":"2018-11-01T05:10:05.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp9tjje5000ib8umcndzdse4","content":"<p>本程序使用matab2018a 运行通过</p>\n<h2 id=\"常微分方程为：-x-prime-t-2x-t-t\"><a href=\"#常微分方程为：-x-prime-t-2x-t-t\" class=\"headerlink\" title=\"常微分方程为： $$ x{\\prime}(t)=-2x(t)+t $$\"></a>常微分方程为： $$ x{\\prime}(t)=-2x(t)+t $$</h2><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear;</span><br><span class=\"line\">% 将方程转换为: ax&apos;=bx + ct</span><br><span class=\"line\">a=1.;</span><br><span class=\"line\">b=-2.;</span><br><span class=\"line\">c=1.;</span><br><span class=\"line\">% 初始值</span><br><span class=\"line\">tinit= 0.;</span><br><span class=\"line\">tmax=5.;</span><br><span class=\"line\">% 时间步长</span><br><span class=\"line\">maxt = 3000;</span><br><span class=\"line\">dt = (tmax-tinit)/maxt;</span><br><span class=\"line\">% 初始条件</span><br><span class=\"line\">x(1)=1.;</span><br><span class=\"line\">t(1)=tinit;</span><br><span class=\"line\">% 迭代求解</span><br><span class=\"line\">for j=1:maxt;</span><br><span class=\"line\">x(j+1)=x(j)+dt*((b*x(j)+c*(j)*dt)/a);</span><br><span class=\"line\">t(j+1)=tinit+j*dt;</span><br><span class=\"line\">end;</span><br><span class=\"line\">%画图</span><br><span class=\"line\">plot(t,x)</span><br><span class=\"line\">title(&apos;Euler Method&apos;)</span><br><span class=\"line\">xlabel(&apos;T&apos;)</span><br><span class=\"line\">ylabel(&apos;X(t)&apos;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/a1.svg\" alt=\"图片\"></p>\n","site":{"data":{}},"excerpt":"<p>本程序使用matab2018a 运行通过</p>\n<h2 id=\"常微分方程为：-x-prime-t-2x-t-t\"><a href=\"#常微分方程为：-x-prime-t-2x-t-t\" class=\"headerlink\" title=\"常微分方程为： $$ x{\\prime}(t)=-2x(t)+t $$\"></a>常微分方程为： $$ x{\\prime}(t)=-2x(t)+t $$</h2>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear;</span><br><span class=\"line\">% 将方程转换为: ax&apos;=bx + ct</span><br><span class=\"line\">a=1.;</span><br><span class=\"line\">b=-2.;</span><br><span class=\"line\">c=1.;</span><br><span class=\"line\">% 初始值</span><br><span class=\"line\">tinit= 0.;</span><br><span class=\"line\">tmax=5.;</span><br><span class=\"line\">% 时间步长</span><br><span class=\"line\">maxt = 3000;</span><br><span class=\"line\">dt = (tmax-tinit)/maxt;</span><br><span class=\"line\">% 初始条件</span><br><span class=\"line\">x(1)=1.;</span><br><span class=\"line\">t(1)=tinit;</span><br><span class=\"line\">% 迭代求解</span><br><span class=\"line\">for j=1:maxt;</span><br><span class=\"line\">x(j+1)=x(j)+dt*((b*x(j)+c*(j)*dt)/a);</span><br><span class=\"line\">t(j+1)=tinit+j*dt;</span><br><span class=\"line\">end;</span><br><span class=\"line\">%画图</span><br><span class=\"line\">plot(t,x)</span><br><span class=\"line\">title(&apos;Euler Method&apos;)</span><br><span class=\"line\">xlabel(&apos;T&apos;)</span><br><span class=\"line\">ylabel(&apos;X(t)&apos;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/a1.svg\" alt=\"图片\"></p>"},{"title":"常微分方程的数值解法（龙格库塔法）","date":"2018-11-01T05:05:00.000Z","_content":"## 常微分方程为：$$ x{\\prime}(t)=x $$  \n其解析解容易求得为$$ t=e^t $$ 当t=0时，$ e^0=1 $,当t=10时，$ e^{10}=22026.465794806718 $\n<!--more-->  \n### 经典四阶龙格库塔公式如下\n$$f(x)=\n\\begin{cases}\ny_{n+1}=y_n+\\frac{h(k_1+2k_2+2k_3+k_4)}{6}  \\newline\nk_1=f(x_n,y_n)  \\newline\nk_2=f(x_n+\\frac{h}{2},y_n+\\frac{hk_1}{2})  \\newline\nk_3=f(x_n+\\frac{h}{2},y_n+\\frac{hk_2}{2})  \\newline\nk_4=f(x_{n+1},y_n+hk_3)\n\\end{cases}$$  \n本次计算，时间为0-10s，时间步长为0.001，以下为Python(Python3.6中编译通过)的计算代码：\n\n## 代码如下\n\n```\n\"\"\"\nCreated on Thu Nov  1 11:25:00 2018\n\n@author: Devil Grape\n\"\"\"\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nxintial=0   #x初始值 例如y'(t)=y,则xintial的初始值为t的初始值\nyintial=1  #y的初始值，例如y'(t)=y,则y(x=xintial)的值\nxfinal=10  #x的终点\n\nh=0.001   #步长\nN=(xfinal-xintial)/h #步数\nX,Y=[xintial],[yintial] #初始化\n\ndef f(x,y):\n    return y\n\ny_n=Y[0]\nfor i in range(int(N)):\n    x_n=i*h\n\n    k_1=f(x_n,y_n)\n    k_2=f(x_n+0.5*h,y_n+0.5*h*k_1)\n    k_3=f(x_n+0.5*h,y_n+0.5*h*k_2)\n    k_4=f(x_n+h,y_n+h*k_3)\n    y_n+=1/6*h*(k_1+2*k_2+2*k_3+k_4)\n    X.append(x_n+h)\n    Y.append(y_n)\n\n    \nexact=[math.exp(t) for t in range(11)]\n#error = np.array(exact) - np.array(Y)\n#print(\"max error {:.5f}\".format(max(error)))\nplt.plot(X,Y,'r:',lw=2)\na=np.linspace(0.,11.,11, endpoint=False)\nplt.scatter(a,exact,lw=2)\n\n\n```\n求解方程后得到，$ e^{10}=22026.465794804935 $与解析解22026.465794806718非常相近  \n如下为解析解和龙格库塔法求解结果的对比  \n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/rk4.svg)","source":"_posts/龙格库塔法.md","raw":"---\ntitle: 常微分方程的数值解法（龙格库塔法）\ncategories: 数值计算\ntags: Python\ndate: 2018-11-01 13:05:00\n---\n## 常微分方程为：$$ x{\\prime}(t)=x $$  \n其解析解容易求得为$$ t=e^t $$ 当t=0时，$ e^0=1 $,当t=10时，$ e^{10}=22026.465794806718 $\n<!--more-->  \n### 经典四阶龙格库塔公式如下\n$$f(x)=\n\\begin{cases}\ny_{n+1}=y_n+\\frac{h(k_1+2k_2+2k_3+k_4)}{6}  \\newline\nk_1=f(x_n,y_n)  \\newline\nk_2=f(x_n+\\frac{h}{2},y_n+\\frac{hk_1}{2})  \\newline\nk_3=f(x_n+\\frac{h}{2},y_n+\\frac{hk_2}{2})  \\newline\nk_4=f(x_{n+1},y_n+hk_3)\n\\end{cases}$$  \n本次计算，时间为0-10s，时间步长为0.001，以下为Python(Python3.6中编译通过)的计算代码：\n\n## 代码如下\n\n```\n\"\"\"\nCreated on Thu Nov  1 11:25:00 2018\n\n@author: Devil Grape\n\"\"\"\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nxintial=0   #x初始值 例如y'(t)=y,则xintial的初始值为t的初始值\nyintial=1  #y的初始值，例如y'(t)=y,则y(x=xintial)的值\nxfinal=10  #x的终点\n\nh=0.001   #步长\nN=(xfinal-xintial)/h #步数\nX,Y=[xintial],[yintial] #初始化\n\ndef f(x,y):\n    return y\n\ny_n=Y[0]\nfor i in range(int(N)):\n    x_n=i*h\n\n    k_1=f(x_n,y_n)\n    k_2=f(x_n+0.5*h,y_n+0.5*h*k_1)\n    k_3=f(x_n+0.5*h,y_n+0.5*h*k_2)\n    k_4=f(x_n+h,y_n+h*k_3)\n    y_n+=1/6*h*(k_1+2*k_2+2*k_3+k_4)\n    X.append(x_n+h)\n    Y.append(y_n)\n\n    \nexact=[math.exp(t) for t in range(11)]\n#error = np.array(exact) - np.array(Y)\n#print(\"max error {:.5f}\".format(max(error)))\nplt.plot(X,Y,'r:',lw=2)\na=np.linspace(0.,11.,11, endpoint=False)\nplt.scatter(a,exact,lw=2)\n\n\n```\n求解方程后得到，$ e^{10}=22026.465794804935 $与解析解22026.465794806718非常相近  \n如下为解析解和龙格库塔法求解结果的对比  \n![图片](https://imageone.oss-cn-beijing.aliyuncs.com/rk4.svg)","slug":"龙格库塔法","published":1,"updated":"2018-11-01T05:41:41.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp9tjjea000lb8umupy0om5u","content":"<h2 id=\"常微分方程为：-x-prime-t-x\"><a href=\"#常微分方程为：-x-prime-t-x\" class=\"headerlink\" title=\"常微分方程为：$$ x{\\prime}(t)=x $$\"></a>常微分方程为：$$ x{\\prime}(t)=x $$</h2><p>其解析解容易求得为$$ t=e^t $$ 当t=0时，$ e^0=1 $,当t=10时，$ e^{10}=22026.465794806718 $<br><a id=\"more\"></a>  </p>\n<h3 id=\"经典四阶龙格库塔公式如下\"><a href=\"#经典四阶龙格库塔公式如下\" class=\"headerlink\" title=\"经典四阶龙格库塔公式如下\"></a>经典四阶龙格库塔公式如下</h3><p>$$f(x)=<br>\\begin{cases}<br>y_{n+1}=y_n+\\frac{h(k_1+2k_2+2k_3+k_4)}{6}  \\newline<br>k_1=f(x_n,y_n)  \\newline<br>k_2=f(x_n+\\frac{h}{2},y_n+\\frac{hk_1}{2})  \\newline<br>k_3=f(x_n+\\frac{h}{2},y_n+\\frac{hk_2}{2})  \\newline<br>k_4=f(x_{n+1},y_n+hk_3)<br>\\end{cases}$$<br>本次计算，时间为0-10s，时间步长为0.001，以下为Python(Python3.6中编译通过)的计算代码：</p>\n<h2 id=\"代码如下\"><a href=\"#代码如下\" class=\"headerlink\" title=\"代码如下\"></a>代码如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">Created on Thu Nov  1 11:25:00 2018</span><br><span class=\"line\"></span><br><span class=\"line\">@author: Devil Grape</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">import math</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\"></span><br><span class=\"line\">xintial=0   #x初始值 例如y&apos;(t)=y,则xintial的初始值为t的初始值</span><br><span class=\"line\">yintial=1  #y的初始值，例如y&apos;(t)=y,则y(x=xintial)的值</span><br><span class=\"line\">xfinal=10  #x的终点</span><br><span class=\"line\"></span><br><span class=\"line\">h=0.001   #步长</span><br><span class=\"line\">N=(xfinal-xintial)/h #步数</span><br><span class=\"line\">X,Y=[xintial],[yintial] #初始化</span><br><span class=\"line\"></span><br><span class=\"line\">def f(x,y):</span><br><span class=\"line\">    return y</span><br><span class=\"line\"></span><br><span class=\"line\">y_n=Y[0]</span><br><span class=\"line\">for i in range(int(N)):</span><br><span class=\"line\">    x_n=i*h</span><br><span class=\"line\"></span><br><span class=\"line\">    k_1=f(x_n,y_n)</span><br><span class=\"line\">    k_2=f(x_n+0.5*h,y_n+0.5*h*k_1)</span><br><span class=\"line\">    k_3=f(x_n+0.5*h,y_n+0.5*h*k_2)</span><br><span class=\"line\">    k_4=f(x_n+h,y_n+h*k_3)</span><br><span class=\"line\">    y_n+=1/6*h*(k_1+2*k_2+2*k_3+k_4)</span><br><span class=\"line\">    X.append(x_n+h)</span><br><span class=\"line\">    Y.append(y_n)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">exact=[math.exp(t) for t in range(11)]</span><br><span class=\"line\">#error = np.array(exact) - np.array(Y)</span><br><span class=\"line\">#print(&quot;max error &#123;:.5f&#125;&quot;.format(max(error)))</span><br><span class=\"line\">plt.plot(X,Y,&apos;r:&apos;,lw=2)</span><br><span class=\"line\">a=np.linspace(0.,11.,11, endpoint=False)</span><br><span class=\"line\">plt.scatter(a,exact,lw=2)</span><br></pre></td></tr></table></figure>\n<p>求解方程后得到，$ e^{10}=22026.465794804935 $与解析解22026.465794806718非常相近<br>如下为解析解和龙格库塔法求解结果的对比<br><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/rk4.svg\" alt=\"图片\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"常微分方程为：-x-prime-t-x\"><a href=\"#常微分方程为：-x-prime-t-x\" class=\"headerlink\" title=\"常微分方程为：$$ x{\\prime}(t)=x $$\"></a>常微分方程为：$$ x{\\prime}(t)=x $$</h2><p>其解析解容易求得为$$ t=e^t $$ 当t=0时，$ e^0=1 $,当t=10时，$ e^{10}=22026.465794806718 $<br>","more":"</p>\n<h3 id=\"经典四阶龙格库塔公式如下\"><a href=\"#经典四阶龙格库塔公式如下\" class=\"headerlink\" title=\"经典四阶龙格库塔公式如下\"></a>经典四阶龙格库塔公式如下</h3><p>$$f(x)=<br>\\begin{cases}<br>y_{n+1}=y_n+\\frac{h(k_1+2k_2+2k_3+k_4)}{6}  \\newline<br>k_1=f(x_n,y_n)  \\newline<br>k_2=f(x_n+\\frac{h}{2},y_n+\\frac{hk_1}{2})  \\newline<br>k_3=f(x_n+\\frac{h}{2},y_n+\\frac{hk_2}{2})  \\newline<br>k_4=f(x_{n+1},y_n+hk_3)<br>\\end{cases}$$<br>本次计算，时间为0-10s，时间步长为0.001，以下为Python(Python3.6中编译通过)的计算代码：</p>\n<h2 id=\"代码如下\"><a href=\"#代码如下\" class=\"headerlink\" title=\"代码如下\"></a>代码如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">Created on Thu Nov  1 11:25:00 2018</span><br><span class=\"line\"></span><br><span class=\"line\">@author: Devil Grape</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">import math</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\"></span><br><span class=\"line\">xintial=0   #x初始值 例如y&apos;(t)=y,则xintial的初始值为t的初始值</span><br><span class=\"line\">yintial=1  #y的初始值，例如y&apos;(t)=y,则y(x=xintial)的值</span><br><span class=\"line\">xfinal=10  #x的终点</span><br><span class=\"line\"></span><br><span class=\"line\">h=0.001   #步长</span><br><span class=\"line\">N=(xfinal-xintial)/h #步数</span><br><span class=\"line\">X,Y=[xintial],[yintial] #初始化</span><br><span class=\"line\"></span><br><span class=\"line\">def f(x,y):</span><br><span class=\"line\">    return y</span><br><span class=\"line\"></span><br><span class=\"line\">y_n=Y[0]</span><br><span class=\"line\">for i in range(int(N)):</span><br><span class=\"line\">    x_n=i*h</span><br><span class=\"line\"></span><br><span class=\"line\">    k_1=f(x_n,y_n)</span><br><span class=\"line\">    k_2=f(x_n+0.5*h,y_n+0.5*h*k_1)</span><br><span class=\"line\">    k_3=f(x_n+0.5*h,y_n+0.5*h*k_2)</span><br><span class=\"line\">    k_4=f(x_n+h,y_n+h*k_3)</span><br><span class=\"line\">    y_n+=1/6*h*(k_1+2*k_2+2*k_3+k_4)</span><br><span class=\"line\">    X.append(x_n+h)</span><br><span class=\"line\">    Y.append(y_n)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">exact=[math.exp(t) for t in range(11)]</span><br><span class=\"line\">#error = np.array(exact) - np.array(Y)</span><br><span class=\"line\">#print(&quot;max error &#123;:.5f&#125;&quot;.format(max(error)))</span><br><span class=\"line\">plt.plot(X,Y,&apos;r:&apos;,lw=2)</span><br><span class=\"line\">a=np.linspace(0.,11.,11, endpoint=False)</span><br><span class=\"line\">plt.scatter(a,exact,lw=2)</span><br></pre></td></tr></table></figure>\n<p>求解方程后得到，$ e^{10}=22026.465794804935 $与解析解22026.465794806718非常相近<br>如下为解析解和龙格库塔法求解结果的对比<br><img src=\"https://imageone.oss-cn-beijing.aliyuncs.com/rk4.svg\" alt=\"图片\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjp9tjjdm0001b8umlqwyyn84","category_id":"cjp9tjjdx0004b8umc613j5re","_id":"cjp9tjje4000fb8umpewmroag"},{"post_id":"cjp9tjjdv0003b8um8j19isp9","category_id":"cjp9tjje0000ab8umktuub0k5","_id":"cjp9tjjeb000nb8umdwmp1nm1"},{"post_id":"cjp9tjjdx0005b8umsfg3elp3","category_id":"cjp9tjje0000ab8umktuub0k5","_id":"cjp9tjjed000sb8umb576fwye"},{"post_id":"cjp9tjjdy0006b8umdp77l4bt","category_id":"cjp9tjje0000ab8umktuub0k5","_id":"cjp9tjjef000xb8umfwqadhqs"},{"post_id":"cjp9tjje00009b8umy7dq6kge","category_id":"cjp9tjje0000ab8umktuub0k5","_id":"cjp9tjjeg000zb8umpw4l5zwp"},{"post_id":"cjp9tjje1000bb8um0q9sm6oh","category_id":"cjp9tjjef000wb8umybiiiq9i","_id":"cjp9tjjeh0014b8ummabda54b"},{"post_id":"cjp9tjje5000ib8umcndzdse4","category_id":"cjp9tjjef000wb8umybiiiq9i","_id":"cjp9tjjeh0015b8umb6zm8ylk"},{"post_id":"cjp9tjjea000lb8umupy0om5u","category_id":"cjp9tjjef000wb8umybiiiq9i","_id":"cjp9tjjeh0016b8um9dsni7jn"}],"PostTag":[{"post_id":"cjp9tjjdi0000b8umezxlfb0t","tag_id":"cjp9tjjdu0002b8umdbgw2fcd","_id":"cjp9tjje00008b8umr9jkt6sa"},{"post_id":"cjp9tjje00009b8umy7dq6kge","tag_id":"cjp9tjjdz0007b8um3yrk55rc","_id":"cjp9tjje3000db8um4g5b6omg"},{"post_id":"cjp9tjjdm0001b8umlqwyyn84","tag_id":"cjp9tjjdz0007b8um3yrk55rc","_id":"cjp9tjje5000hb8umxwoi5tcn"},{"post_id":"cjp9tjje3000eb8umvz49x7q2","tag_id":"cjp9tjjdu0002b8umdbgw2fcd","_id":"cjp9tjje9000kb8umjtrrax9o"},{"post_id":"cjp9tjjdv0003b8um8j19isp9","tag_id":"cjp9tjjdz0007b8um3yrk55rc","_id":"cjp9tjjeb000ob8umyfyt3x0c"},{"post_id":"cjp9tjjea000lb8umupy0om5u","tag_id":"cjp9tjjdz0007b8um3yrk55rc","_id":"cjp9tjjec000qb8umim46r64d"},{"post_id":"cjp9tjjdx0005b8umsfg3elp3","tag_id":"cjp9tjjdz0007b8um3yrk55rc","_id":"cjp9tjjee000tb8umuqy80g2x"},{"post_id":"cjp9tjjdy0006b8umdp77l4bt","tag_id":"cjp9tjjdz0007b8um3yrk55rc","_id":"cjp9tjjef000vb8umab2n3ywr"},{"post_id":"cjp9tjje1000bb8um0q9sm6oh","tag_id":"cjp9tjjee000ub8um0nsq3o8s","_id":"cjp9tjjeg0010b8umld3itjke"},{"post_id":"cjp9tjje5000ib8umcndzdse4","tag_id":"cjp9tjjee000ub8um0nsq3o8s","_id":"cjp9tjjeh0012b8umlw3mcms9"}],"Tag":[{"name":"随笔","_id":"cjp9tjjdu0002b8umdbgw2fcd"},{"name":"Python","_id":"cjp9tjjdz0007b8um3yrk55rc"},{"name":"MatLab","_id":"cjp9tjjee000ub8um0nsq3o8s"}]}}